{"meta":{"title":"客博的ءارمىتاشقۇل","subtitle":"一个异想天开的人受古怪的行为和不可预测的想法的支配...不可预测...这太棒了！","description":"新疆伊犁哈萨克族人，坚定的马克思主义者，目前定居浙江……汉语不太好请见谅……民族大团结万岁！","author":"ءارمىتاشقۇل","url":"http://milarodvia.github.io","root":"/"},"pages":[{"title":"关于笔者","date":"2019-05-19T09:58:15.076Z","updated":"2019-05-19T09:58:15.076Z","comments":true,"path":"about/index.html","permalink":"http://milarodvia.github.io/about/index.html","excerpt":"","text":"新疆伊犁哈萨克族人，坚定的马克思主义者，目前定居浙江……汉语不太好请见谅……民族大团结万岁！ 笔者欢迎对笔者文章持不同态度的人对笔者进行联系。联系笔者的方式主要是通过E-mail。 注意：在和笔者进行交流的时候，电子邮件需要有下面的格式： 标题一律以《文章名字》的批判/建议/提问的形式设置。 正文简洁，开门见山。 请确保您的电子邮箱可以接受回信，这样方便笔者进行回信。 请不要发送垃圾信息。"},{"title":"分类","date":"2019-05-19T09:21:42.216Z","updated":"2019-05-19T09:21:42.216Z","comments":true,"path":"categories/index.html","permalink":"http://milarodvia.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-05-19T09:23:27.429Z","updated":"2019-05-19T09:23:27.429Z","comments":true,"path":"mylist/index.html","permalink":"http://milarodvia.github.io/mylist/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-05-19T09:51:23.906Z","updated":"2019-05-19T09:51:23.906Z","comments":true,"path":"friends/index.html","permalink":"http://milarodvia.github.io/friends/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-05-19T09:22:50.388Z","updated":"2019-05-19T09:22:50.388Z","comments":true,"path":"tags/index.html","permalink":"http://milarodvia.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"高观点下的性别认同问题","slug":"高观点下的性别认同问题","date":"2019-05-15T15:59:31.000Z","updated":"2019-05-19T05:34:47.689Z","comments":true,"path":"2019/05/15/高观点下的性别认同问题/","link":"","permalink":"http://milarodvia.github.io/2019/05/15/高观点下的性别认同问题/","excerpt":"","text":"全世界无产者，联合起来！{\\color{red}{全世界无产者，联合起来！}} 全世界无产者，联合起来！ 第零章 导言 请留意本文的版权说明。 在上个月（2019.4），我和心理办公室的老师曾经一起探讨过性别认同这个问题。现在将我们讨论出的结果呈现在讲稿中，讲演给各位同学。 注意：这里的异化和马克思主义哲学的异化范畴不是一样的概念。 随着社会的发展，越来越多的人在性别上开始走向自身的“反面”，因此，研究这一现象，不仅是理论的必要，而且也是现实的必要。 性别认同（或称性别同一性）是对自身性别的正确认识，即掌握自己的性属性或相应的作用。 第一章 初识身边的性别认同问题 我们的身边不乏有性别认同问题的存在。比如在GitHub上有一个非常有名的项目——这是目前GitHub上已知的最大的女装资料库，而且有人正在利用其来开发一个女装识别器。 你是否参加过各类漫展？ 你身边是否有很娘的男生或者很Man的女生？ 下面展示一张图片： 这都是我们身边的性别认同问题。为了叙述方便，我们约定，将存在性别认同的人划为性别异化的范畴。 这里的异化和马克思主义哲学的异化范畴不是一样的概念。 第二章 舆论 公众舆论是怎么对待这些可怜的性别异化者呢？一般来说，有如下的说法： 可爱的男孩子什么的最棒啦！ 这明显是对性别异化的一种支持。 不男不女…\\dots… 这明显是一种尖锐的批评。 第三章 理论 有的同学可能会有疑惑： 我们这是心理学的论坛，讲哲学干什么呢？ 哲学是最抽象的科学，因而也是应用最广的科学。因此，使用哲学理论来指导我们的工作是很好的。再说，心理学本身就是脱胎于哲学，正所谓： 哲心不分家。 我们务必先理解一下唯物辩证法的两个观点。 第一节 特殊性和普遍性 绝不能以特殊性否定普遍性。这个观点的证明是否复杂，有兴趣的同学可以自行理解。 结合人类的认识规律。人类认识事物一定遵循着“从特殊到一般”，由特殊本质归纳出普遍本质。《论“数学抽象”的基本特征》（载于《数学通讯》（下半月）2019第一期）一文指出： 数学对象并不是没有内容的，也不是与现实世界毫无关系的，从本源上来说，许多数学对象来自于现实世界。在某一数学对象及其理论被数学家创造出来之后，就像现实世界客观存在的事物一样具有一定的客观属性。另一方面，表现为数学概念，数学理论等的数学抽象的产物，其所蕴含的数学内容是有与其数学基础与逻辑保障的，并不断受到数学共同体的检验从这个角度而言，数学抽象具有一定的客观性。 新的特殊存在的发现是对现有的集合体的批判。我们可以从历史中找到很多的例子，例如毕达哥拉斯学派关于无理数的争论，虚数的引入等等。这些新的数的发现都使得其时的数体系受到批判，从而变得更加完整了。 以特殊性否定普遍性是形而上学的做法。 一次函数是函数，那么二次函数是吗？答案是肯定的。一次函数f(x)=kx+bf(x)=kx+bf(x)=kx+b和二次函数g(x)=x2+πxg(x)=x^2+\\pi xg(x)=x2+πx都是函数的特殊形式，而函数的一般形式则是两集和间的映射关系。除了一次函数和二次函数外，还有更多更多的函数： f(x)=sin⁡xf(x)=\\sin xf(x)=sinx g(x)=log⁡2exg(x)=\\log_2 e^xg(x)=log2​ex μ(x)\\mu(x)μ(x)（莫比乌斯函数） ϕ(p)\\phi(p)ϕ(p)（欧拉函数） 难道能用一次函数的特殊性否定了函数的一般性质吗？明显是不行的。如果以特殊性否定了一般性，那么抽象也就不存在了，作为抽象的抽象的数学也就不存在了。 第二节 对立统一规律及方法论。唯物辩证法 我们不打算把整个辩证法讲完，甚至不打算把整个对立统一规律讲完——因为辩证法及其三大规律是马克思主义哲学中很重要的一块，没有几年的时间是很难完全掌握的。不过，我们可以了解一些方法论的理论，来丰富我们的方法。由于时间关系，我们甚至连矛盾这一重要的哲学范畴也不进行介绍。但是应该强调的是，作为哲学范畴的“矛盾”和作为逻辑学范畴的“矛盾”的意义是不同的。前者是反映事物内部对立统一关系的哲学范畴，后者则是逻辑上的“自相矛盾”。 注意术语的内在含义。 两点论 在一个事物中，不可能只含有一对矛盾。既然矛盾有很多，那么就一定存在主要矛盾和次要矛盾的区分。主要矛盾就是对事物的运动起决定性作用的矛盾，即处主导地位的矛盾。而其他的矛盾是次要矛盾。 主要矛盾和次要矛盾也是一对矛盾。也遵循三大规律。 方法论： 认识、改造事物要抓住重点，集中力量去解决主要矛盾。 要统筹兼顾，恰当处理次要矛盾。 重点论 每一矛盾中的两方面的力量是不平衡的。其中，必有一方处于支配地位，起着主导作用，而另一方则处于被支配地位。前者是矛盾的主要方面，后者是矛盾的次要方面。 事物的性质主要由主要矛盾的主要方面决定。 方法论： 矛盾的主次方面的辩证关系要求我们看问题既要全面，又要善于区分主流和支流。 矛盾的主次之分、矛盾的主次方面的辩证关系要求我们要坚持两点论和重点论的统一。 反对形而上学的一点论和均衡论。 第四章 服务于实践的哲学 理论源于实践，又终将回归实践。在理解了第三章中阐述的辩证法强调的方法论后，我们终于可以把哲学应用在日常生活工作中了。正如卡尔·马克思所说： “哲学家们只是用不同的方式解释世界，而问题在于改变世界。”——《关于费尔巴哈的提纲》 首先我们应当明确：性别异化究竟合不合理？我们十分厌恶黑格尔的热昏胡话： “凡是合乎理性的东西都是现实的；凡是现实的东西都是合乎理性的。”——《法哲学原理》序 我们直接看弗里德里希·恩格斯是怎么说的吧： “这显然是把现存的一切神圣化，是在哲学上替专制制度、替警察国家、替王室司法、替书报检查制度祝福。弗里德里希—威廉三世是这样想的，他的臣民也是这样想的。但是，在黑格尔看来，凡是现存的决非无条件地也是现实的。在他看来，现实的属性仅仅属于那同时是必然的东西……”——《费尔巴哈和德国古典哲学的终结》 根据特殊性和普遍性的理论，我们可以得出：个人的装束、举止和其性别来说没有任何关系。因为个人的装束、举止是特殊的，而性别的本质是第一性征。 不过，也不乏有陷入性别异化困境而想改变现状的人。对于这种想改变自己的人，我们也有一套理论来帮助他们。 首先，我们对性别异化者进行矛盾分析。由于时间有限，我在这里只列出我的分析结果，证明过程略。 主要矛盾：理想与现实的矛盾——成为异性的理想和自身是非异性的现实的矛盾。 次要矛盾：理想与现实的矛盾——渴望他人肯定的理想和他人否定的现实的矛盾。 那么，根据两点论，我们要着重处理主要矛盾。怎么样才可以消灭矛盾呢？——只需要毁灭任一对立面即可。又根据两点论，我们应当先处理矛盾的主要方面，我认为，主要矛盾的两方面是： 主要方面：理想 次要方面：现实 很显然，矛盾是由理想的产生而产生——因为现实一直都是这样，几乎不产生变化，故对矛盾的影响是很小的。 下面讨论如何消灭理想。 其实问题也很简单——通过一些外在的刺激，使TA对这种理想产生厌恶，那么理想就被自己否定了。比如，对于女装成瘾的男生，我们可以通过一些手段，比如把女装和不好的东西联系在一起，使其对女装产生厌恶。（在应用心理学中称为厌恶疗法）当然，作为科学的哲学对具体的细节并不感兴趣——事实上，我们根本无法预见它们，只能具体问题具体分析。 但是，也有人选择否定现实。在现代科技的帮助下，易性是现实的。通过易性术来达到否定现实的目的也是解决矛盾一种手段。不过，实践证明，大部分患者在易性后会产生后悔的心理，因此我们不推荐这么做——实践证明了马克思主义哲学是对的。 同时，我们还要顾及到次要矛盾。作为患者的同学朋友，我们应当积极地帮助TA逃离这种性别异化的状态，而不是去嘲笑，歧视TA。 第五章 尾声 这次讲演的主题是哲学，而不是心理学。我只是借着五二五这个机会向大家宣传一些基本的哲学思想。希望这些思想理论可以对大家平时的生活工作——实践带来方便。","categories":[{"name":"讲义","slug":"讲义","permalink":"http://milarodvia.github.io/categories/讲义/"},{"name":"马克思主义哲学","slug":"讲义/马克思主义哲学","permalink":"http://milarodvia.github.io/categories/讲义/马克思主义哲学/"}],"tags":[{"name":"马克思主义","slug":"马克思主义","permalink":"http://milarodvia.github.io/tags/马克思主义/"}]},{"title":"马爸爸的IT创业课堂讲义（第一讲）","slug":"马爸爸的IT创业课堂讲义（第一讲）","date":"2019-05-03T16:45:44.000Z","updated":"2019-05-03T08:46:26.133Z","comments":true,"path":"2019/05/04/马爸爸的IT创业课堂讲义（第一讲）/","link":"","permalink":"http://milarodvia.github.io/2019/05/04/马爸爸的IT创业课堂讲义（第一讲）/","excerpt":"","text":"生产的要素： 劳动者提供的劳动力 资本家提供的资本 因此： 生产资料+劳动=劳动产品生产资料+劳动=劳动产品 生产资料+劳动=劳动产品 有公式： c+v+m=wc+v+m=w c+v+m=w 其中： ccc:固定资本（生产资料） vvv:可变资本（劳动力的价值） mmm:剩余价值 www:总价值 例如： 马爸爸技术有限公司要开发一个项目：反反996宣传器，现在需要六台电脑及其损耗，程序员六人。程序员一个月工资200002000020000元，项目预计两个月可以完成，预计市场200000020000002000000元。 因此： c=2×ϕv=2×20000×6=240000w=2000000m=w−c−v=2000000−240000−2ϕ=1760000−2ϕc=2\\times \\phi\\\\ v=2\\times20000\\times6=240000\\\\ w=2000000 m=w-c-v=2000000-240000-2\\phi=1760000-2\\phi c=2×ϕv=2×20000×6=240000w=2000000m=w−c−v=2000000−240000−2ϕ=1760000−2ϕ 假定电脑设备的月均耗损ϕ=500\\phi=500ϕ=500，则： w=1760000−2ϕ=1759000w=1760000-2\\phi=1759000 w=1760000−2ϕ=1759000 所以我们得出，六个程序员创造出了两百万元对应的价值量，其中剩余价值为一百七十五万九千元对应的价值量。 毫无疑问，这一百七十多万的剩余价值都被老板，即马爸爸（2333333）无偿占有了。 程序员是被剥削的。 我们接下来论证，为什么996工作制度对程序员来说更加不利。 为了方便计算，我们约定： 每小时每人工资：λ=500每小时每人工资：\\lambda=500 每小时每人工资：λ=500 由伟大的996工作体制易得： 一天工作121212小时，则没人每天的工资是： v0=12λ=6000v_0=12\\lambda=6000 v0​=12λ=6000 高收入群体。 对于这个问题，我们不管老板剥削了多少，我们只关心老板是如何剥削程序员的。 方法一 从955到996 955的月工作时间：31÷7×5×8=17731\\div7\\times5\\times8=17731÷7×5×8=177 996的月工作时间：31÷7×6×12=31831\\div7\\times6\\times12=31831÷7×6×12=318 还是以刚才的那个项目为例，工人创造了一百七十五万九千元的剩余价值。那么如果我们无偿的延长工人的工作时间，即在可变资本即工资不变的情况下延长工作时间。 约定下面的量： c=1000c=1000c=1000 v′=500000v&#x27;=500000v′=500000（月工资） w=2000000w=2000000w=2000000 m=w−12v′−c=1399000m=w-12v&#x27;-c=1399000m=w−12v′−c=1399000 995: 如上。 996: 工人每天无偿给资本家工作四小时，加班文化万岁！ 所以，相对于项目，原先需要： t=(31+30)÷7×5×8×6=2091t=(31+30)\\div7\\times5\\times8\\times6=2091 t=(31+30)÷7×5×8×6=2091 个工时完成。 则现在需要 mo=2091÷12÷6÷7÷4=1mo=2091\\div12\\div6\\div7\\div4=1 mo=2091÷12÷6÷7÷4=1 个月就可以完成！！！ 等于资本家可以少付一个月的工资，而获得原来两个月的剩余价值！！！ 更加不平等的剥削——但是我们是狼性文化啊！！！！ 方法二 更细致的分工 资本家可以通过使分工更加细致的手段来更加变本加厉地剥削程序员。我们首先来理解一下，工人的工资是怎么确定的。 雇佣实际上是一场交易——工人出售劳动力，资本家出售货币。 劳动力的价值如何确定？——答案是：使劳动力可以再生的最低资料的价值总和。 例如，一个程序员一天至少： 花费100元来买吃的 花费200元来还房贷车贷汽油电费孩子学费之类琐碎 花费200元来学习（真TM好学） 所以，贵公司想要养活一个程序员，每天至少要付给TA500元！ 反映到一个月，就是500×30=15000500\\times30=15000500×30=15000元！ 哎，工资那么少，看来只是一个小码工啊。 好了，现在我们看看AI工程师的一天……： 花费100元来买吃的 花费200元来还房贷车贷汽油电费孩子学费之类琐碎 花费1000元来学习 花费500元来？？？ 所以，贵公司想要养活一个AI工程师，每天想要投入2000元，反映到一个月就是2000×30=600002000\\times30=600002000×30=60000 月薪六万啊！——马爸爸慌了——这让我赚什么钱啊！ 你想想，怎么才能让马爸爸赚到更多的钱呢？ 单单从工资上来说，一个AI工程师等于4个小码工。 马爸爸一拍脑袋——对啊，我可以解雇掉我们的工程师，让他滚到微软去，然后聘请四个小码工——四个小码工的工作效率肯定比一个AI工程师高！ 假设AI工程师一小时可以完成的工作量是α=20\\alpha=20α=20，一个小码工一小时可以完成的工作量是α=10\\alpha=10α=10。 马爸爸把四个小码工给塞到工程师的办公室里，那么这个办公室的每小时的工作效率是多少呢？ α=40\\alpha=40 α=40 果然！四个小码工的工作效率比一个工程师要高！我tm还花大钱聘请这些废物干什么…… 好了，言归正传。马爸爸的这种做法，其实也是对绝对剩余价值的一种热爱的表现。你想想啊，我们把四个小码工看做一个联合体，那么他们的工资和工程师一样，但是他们干的活却多——也就是说，在单位时间里，联合体给马爸爸创造的财富是工程师给马爸爸创造的财富的四倍！！！ 好啦，马爸爸的IT创业课堂就到这里了。什么？你不知道怎么更有效地赚钱？ 结合996和分工不就好啦！下面的小码工什么也不懂，每个月给他们多发300300300元奖金不就好啦~","categories":[{"name":"讲义","slug":"讲义","permalink":"http://milarodvia.github.io/categories/讲义/"},{"name":"马爸爸的IT创业课堂","slug":"讲义/马爸爸的IT创业课堂","permalink":"http://milarodvia.github.io/categories/讲义/马爸爸的IT创业课堂/"},{"name":"第一讲","slug":"讲义/马爸爸的IT创业课堂/第一讲","permalink":"http://milarodvia.github.io/categories/讲义/马爸爸的IT创业课堂/第一讲/"}],"tags":[{"name":"杂文","slug":"杂文","permalink":"http://milarodvia.github.io/tags/杂文/"}]},{"title":"利用偏导数工具解一类最值问题","slug":"利用偏导数工具解一类最值问题","date":"2019-04-24T16:06:24.000Z","updated":"2019-05-19T05:38:00.469Z","comments":true,"path":"2019/04/25/利用偏导数工具解一类最值问题/","link":"","permalink":"http://milarodvia.github.io/2019/04/25/利用偏导数工具解一类最值问题/","excerpt":"","text":"已知x,y,z∈R,x+y+z=1x,y,z\\in R,x+y+z=1x,y,z∈R,x+y+z=1，求M=xy+2yz+3xzM=xy+2yz+3xzM=xy+2yz+3xz的最大值 x+y+z=1⇔z=1−x−y⇒M=f(x,y)=xy+2y(1−x−y)+3x(1−x−y)=−3x2−xy2−4xy+3x+2yx+y+z=1\\Leftrightarrow z=1-x-y\\\\ \\Rightarrow M=f(x,y)=xy+2y(1-x-y)+3x(1-x-y)\\\\ =-3x^2-xy^2-4xy+3x+2y x+y+z=1⇔z=1−x−y⇒M=f(x,y)=xy+2y(1−x−y)+3x(1−x−y)=−3x2−xy2−4xy+3x+2y 求f(x,y)f(x,y)f(x,y)的偏导数： {∂f(x,y)∂x=−6x−4y+3∂f(x,y)∂y=−4x−4y+2\\left\\{ \\begin{aligned} \\frac{\\partial f(x,y)}{\\partial x}=-6x-4y+3\\\\ \\frac{\\partial f(x,y)}{\\partial y}=-4x-4y+2 \\end{aligned} \\right. ⎩⎪⎪⎨⎪⎪⎧​∂x∂f(x,y)​=−6x−4y+3∂y∂f(x,y)​=−4x−4y+2​ 由费马定理，联立方程组： {−6x−4y+3=0−4x−4y+2=0\\left\\{ \\begin{aligned} -6x-4y+3=0\\\\ -4x-4y+2=0 \\end{aligned} \\right. {−6x−4y+3=0−4x−4y+2=0​ 解得： {x=12y=0\\left\\{ \\begin{aligned} x=\\frac12\\\\ y=0 \\end{aligned} \\right. ⎩⎨⎧​x=21​y=0​ 故z=12z=\\frac12z=21​。故MMM有最大值34\\frac3443​。 在初中阶段，往往不需要考虑多元函数是否有最值，但在后期的学习中却往往需要考虑。 传统的方法： M=−3x2−2y2−4xy+3x+2y=−2[y2+2(x−12)y+(x−12)2]−3x2+3x+2(x−12)2=−2(x+y−12)2−x2+x+12=−2(x+y+12)2−(x−12)2+34≤34M=-3x^2-2y^2-4xy+3x+2y\\\\ =-2[y^2+2(x-\\frac12)y+(x-\\frac12)^2]-3x^2+3x+2(x-\\frac12)^2\\\\ =-2(x+y-\\frac12)^2-x^2+x+\\frac12\\\\ =-2(x+y+\\frac12)^2-(x-\\frac12)^2+\\frac34\\leq\\frac34 M=−3x2−2y2−4xy+3x+2y=−2[y2+2(x−21​)y+(x−21​)2]−3x2+3x+2(x−21​)2=−2(x+y−21​)2−x2+x+21​=−2(x+y+21​)2−(x−21​)2+43​≤43​ 当且仅当x=12,y=0x=\\frac12,y=0x=21​,y=0，时，不等式取等号。故MMM有最大值34\\frac3443​。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"解一道日本赛题","slug":"解一道日本赛题","date":"2019-04-23T17:38:50.000Z","updated":"2019-04-23T09:38:55.404Z","comments":true,"path":"2019/04/24/解一道日本赛题/","link":"","permalink":"http://milarodvia.github.io/2019/04/24/解一道日本赛题/","excerpt":"","text":"平太给大介出了一道计算题（AAA，BBB各代表两位数中各位上的数字，相同的字母代表相同的数字）： AB‾×BA‾=\\overline{AB}\\times\\overline{BA}= AB×BA= 大介：“得数是287228722872。” 平太：“不对。” 大介：“个位的数字对吗？” 平太：“对。” 大介：“其他数位的数字有对的吗？” 平太：“这是保密的。但你调换一下四位数287228722872中444个数的位置，就能得出正确答案。” 请求出正确答案。 （第131313届日本数学奥林匹克决赛） 因为个位数为222，所以B×AB\\times AB×A只能是： 1×21\\times21×2 2×62\\times62×6 3×43\\times43×4 4×84\\times84×8 6×76\\times76×7 8×98\\times98×9 一一带入检验，得： {12×21=25226×62=161234×43=146248×84=403267×76=509289×98=8722\\left\\{ \\begin{aligned} 12\\times21=252\\\\ 26\\times62=1612\\\\ 34\\times43=1462\\\\ 48\\times84=4032\\\\ 67\\times76=5092\\\\ 89\\times98=8722 \\end{aligned} \\right. ⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​12×21=25226×62=161234×43=146248×84=403267×76=509289×98=8722​ 注意到只有872287228722与287228722872的构成数字完全相同。 故正确答案为872287228722。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"用三角函数诱导公式解一道联考题","slug":"用三角函数诱导公式解一道联考题","date":"2019-04-21T17:37:52.000Z","updated":"2019-04-21T09:37:58.219Z","comments":true,"path":"2019/04/22/用三角函数诱导公式解一道联考题/","link":"","permalink":"http://milarodvia.github.io/2019/04/22/用三角函数诱导公式解一道联考题/","excerpt":"","text":"已知点A=(0,4),B=(0,−6)A=(0,4),B=(0,-6)A=(0,4),B=(0,−6)，CCC为xxx轴正半轴上一点，且满足∠ACB=45∘\\angle ACB=45^\\circ∠ACB=45∘，则点CCC的坐标为？ （乐清六校理科班第一次联考，5018.9.28） 在平面直角坐标系xOyxOyxOy中，设C=(x,0)C=(x,0)C=(x,0),∠ACO=α\\angle ACO=\\alpha∠ACO=α，∠BCO=β\\angle BCO=\\beta∠BCO=β： {tan⁡α=4xtan⁡β=6x\\left\\{ \\begin{aligned} \\tan\\alpha=\\frac4x\\\\ \\tan\\beta=\\frac6x \\end{aligned} \\right. ⎩⎪⎨⎪⎧​tanα=x4​tanβ=x6​​ 由三角函数的诱导公式知： tan⁡(α+β)=tan⁡α+tan⁡β1−tan⁡αtan⁡β=10x1−24x2=10xx2−24=1\\tan(\\alpha+\\beta)=\\frac{\\tan\\alpha+\\tan\\beta}{1-\\tan\\alpha\\tan\\beta} =\\frac{\\frac{10}x}{1-\\frac{24}{x^2}} =\\frac{10x}{x^2-24} =1 tan(α+β)=1−tanαtanβtanα+tanβ​=1−x224​x10​​=x2−2410x​=1 ⇔x2−10x−24=0⇔(x=−2)∨(x=12)\\Leftrightarrow x^2-10x-24=0\\\\ \\Leftrightarrow (x=-2)\\vee(x=12) ⇔x2−10x−24=0⇔(x=−2)∨(x=12) 因为点CCC在xxx轴正半轴上，舍去x=−2x=-2x=−2。 故C=(12,0)C=(12,0)C=(12,0)。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"一个重要的三角形不等式的证明","slug":"一个重要的三角形不等式的证明","date":"2019-04-19T17:37:31.000Z","updated":"2019-04-19T09:37:46.355Z","comments":true,"path":"2019/04/20/一个重要的三角形不等式的证明/","link":"","permalink":"http://milarodvia.github.io/2019/04/20/一个重要的三角形不等式的证明/","excerpt":"","text":"在△ABC\\triangle ABC△ABC中，有: ∑sin⁡A≤332\\sum \\sin A\\leq\\frac{3\\sqrt3}2 ∑sinA≤233​​ 记f(x)=sin⁡xf(x)=\\sin xf(x)=sinx，则： df(x)dx=cos⁡xd2f(x)dx2=−sin⁡x\\frac{df(x)}{dx}=\\cos x\\\\\\frac{d^2f(x)}{dx^2}=-\\sin x dxdf(x)​=cosxdx2d2f(x)​=−sinx 故d2f(x)dx2&lt;0\\frac{d^2f(x)}{dx^2}&lt;0dx2d2f(x)​&lt;0在x∈(0,π)x\\in(0,\\pi)x∈(0,π)上恒成立。 从而，在x∈(0,π)x\\in(0,\\pi)x∈(0,π)上f(x)f(x)f(x)为凸函数。 由琴生不等式得： f(A)+f(B)+f(C)3≤f(A+B+C3)\\frac{f(A)+f(B)+f(C)}{3}\\leq f(\\frac{A+B+C}3) 3f(A)+f(B)+f(C)​≤f(3A+B+C​) 故∑sin⁡A≤332\\sum\\sin A\\leq\\frac{3\\sqrt3}2∑sinA≤233​​","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"关于数学抽象的摘录","slug":"关于数学抽象的摘录","date":"2019-04-18T17:30:46.000Z","updated":"2019-05-19T05:34:59.501Z","comments":true,"path":"2019/04/19/关于数学抽象的摘录/","link":"","permalink":"http://milarodvia.github.io/2019/04/19/关于数学抽象的摘录/","excerpt":"","text":"文本来源：鲁杰峰，马文杰：《论“数学抽象”的基本特征》[J].数学通讯（下半月），2019（1） 文中的&lt;&gt;中的文字是笔者加的。 数学抽象的基本特征 2.数学抽象具有客观性 数学是以抽象的方式与形式来反映客观世界的数量关系与空间形式的一门科学，具有一定的客观性。数学抽象的客观性常常表现为许多抽象的数学理论具有一定的客观现实背景，或者数学抽象的产物（即数学理论）在社会生活、科学研究中具有广泛的用途。《全日制义务教育数学课程标准（试验稿）》指出：“数学是人们对客观世界定性把握和定量刻画、逐渐抽象概括、形成方法和理论，并进行广泛应用的过程。”从本源上来说，很多数学概念或者数学理论是从现实世界客观存在的事物中，经过抽象，概括出客观事物之间的数量和数量的关系、图形与图形的关系。其数学抽象的过程并不是由人们凭空捏造、任意想象的，并不会因为某一个（类）人的某种观念的变化而发生改变。&lt;参考欧根·杜林先生的数学先验论&gt;数学抽象的客观性还表现在数学抽象的对象与结果是客观的。数学对象并不是没有内容的，也不是与现实世界毫无关系的，从本源上来说，许多数学对象来自于现实世界。在某一数学对象及其理论被数学家创造出来之后，就像现实世界客观存在的事物一样具有一定的客观属性。&lt;不是观念！&gt;另一方面，表现为数学概念，数学理论等的数学抽象的产物，其所蕴含的数学内容是有与其数学基础与逻辑保障的，并不断受到数学共同体的检验&lt;实践是检验真理的唯一标准！&gt;从这个角度而言，数学抽象具有一定的客观性。 …\\dots…","categories":[{"name":"摘录","slug":"摘录","permalink":"http://milarodvia.github.io/categories/摘录/"},{"name":"数学","slug":"摘录/数学","permalink":"http://milarodvia.github.io/categories/摘录/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"拉脱维亚历史","slug":"拉脱维亚历史","date":"2019-04-10T16:03:57.000Z","updated":"2019-04-10T08:06:26.929Z","comments":true,"path":"2019/04/11/拉脱维亚历史/","link":"","permalink":"http://milarodvia.github.io/2019/04/11/拉脱维亚历史/","excerpt":"","text":"拉脱维亚和爱沙尼亚一道，在中古时期统称为立窝尼亚，很早就居住着拉脱维亚人、立窝人、库尔人等波罗的海沿岸各部落。120212021202年，立窝尼亚主教阿尔伯特创建了由德意志封建小领主组成的圣剑骑士团。123712371237年，圣剑骑士团由与条顿骑士团合并，盘踞在波罗的海东岸一带。161616世纪中叶，俄罗斯伊万四世进攻立窝尼亚骑士团国家，骑士团转而寻求波兰-立陶宛和丹麦的保护。156115611561年骑士团瓦解后，立窝尼亚归属立陶宛，后又转归波兰。181818世纪末，在瓜分波兰的过程中，拉脱维亚被沙皇俄国吞并。 第一次世界大战后，191819181918年，苏俄政府承认了拉脱维亚等国的独立。192019201920年，双方签订了和平条约。192219221922年，拉脱维亚制定共和国宪法。苏联成立后，拉脱维亚等波罗的海三国迟迟不愿加入联盟。直到194019401940年，拉脱维亚才与立陶宛以及爱沙尼亚一道，加入了苏联，成为了苏联的加盟共和国。 198719871987年，拉脱维亚首都里加发生了游行示威，反对484848年前的《苏德密约》，以及加入苏联的决定。198819881988年888月，拉脱维亚与立陶宛、爱沙尼亚三国举行了号称“波罗的海之路”的行动，大约200200200万人拉起了长达600600600公里的人链，站立151515分钟之久，高喊“俄国人滚出波罗的海”的口号。198919891989年777月，拉脱维亚共和国率先发表《共和国主权宣言》，宣布本共和国的法律高于全苏法律，这是苏联加盟共和国的第一个“主权宣言”，成为苏联解体的启端。199019901990年444月重组拉脱维亚共产党，同年555月，拉脱维亚通过恢复独立的宣言。199119911991年888月222222日，拉脱维亚正式宣布独立。 今天的拉脱维亚，面积666万多平方公里，人口近300300300万，首都里加是个风景优美的城市，有“欧洲美人”之称。","categories":[{"name":"历史","slug":"历史","permalink":"http://milarodvia.github.io/categories/历史/"}],"tags":[{"name":"历史","slug":"历史","permalink":"http://milarodvia.github.io/tags/历史/"}]},{"title":"程序员国际歌。反对996","slug":"程序员国际歌。反对996","date":"2019-04-03T17:40:54.000Z","updated":"2019-05-19T05:33:49.889Z","comments":true,"path":"2019/04/04/程序员国际歌。反对996/","link":"","permalink":"http://milarodvia.github.io/2019/04/04/程序员国际歌。反对996/","excerpt":"","text":"起来，将过劳死的程序员！ 起来，全IT界受苦的人！ 起来反抗资本的暴政， 要为了真理而斗争！ 996996996,打个落花流水， 码工们起来，起来！ 不要说我们一无所有， 我们要做天下的主人！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 从来就没有什么救世主—— 也不靠议会和总统。 要创造程序员的幸福 ——全靠我们自己！ 我们要夺回劳动果实—— 让思想冲破牢笼！ 快为阶级的权利而斗争， 趁热打铁才能成功！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 是谁创造了网络世界？ 是我们码农群众！ ——一切归程序员们所有， 资本家怎能占有？ 伟大的劳动大军： 阶级斗争已经开始！ 起来吧，伟大的码工： 胜利的曙光就在前头！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 工人们，听那邪恶的口号—— 老板，比我们更辛苦…… 劳有所获，公平无比—— 哪有剥削在其中？ 工人们！看看我们的状况—— 身体和家庭都被毁灭！ 我们必须有所行动—— 全世界的程序员，联合起来！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！ 这是最后的斗争，团结起来到明天！ 程序员自由的劳动条件，就一定要实现！","categories":[{"name":"歌词","slug":"歌词","permalink":"http://milarodvia.github.io/categories/歌词/"},{"name":"反对996","slug":"歌词/反对996","permalink":"http://milarodvia.github.io/categories/歌词/反对996/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://milarodvia.github.io/tags/歌词/"}]},{"title":"一道三角不等式题的证明","slug":"一道三角不等式题的证明","date":"2019-03-27T16:04:48.000Z","updated":"2019-04-17T09:48:55.907Z","comments":true,"path":"2019/03/28/一道三角不等式题的证明/","link":"","permalink":"http://milarodvia.github.io/2019/03/28/一道三角不等式题的证明/","excerpt":"","text":"已知0&lt;θ1&lt;θ2&lt;⋯&lt;θn&lt;π20&lt;\\theta_1&lt;\\theta_2&lt;\\dots&lt;\\theta_n&lt;\\frac\\pi20&lt;θ1​&lt;θ2​&lt;⋯&lt;θn​&lt;2π​，求证： cot⁡θn&lt;∑i=1ncos⁡θi∑i=1nsin⁡θi&lt;cot⁡θ1\\cot\\theta_n&lt;\\frac{\\sum^n_{i=1}\\cos\\theta_i}{\\sum^n_{i=1}\\sin\\theta_i}&lt;\\cot\\theta_1 cotθn​&lt;∑i=1n​sinθi​∑i=1n​cosθi​​&lt;cotθ1​ （命题946946946） 0&lt;θ1&lt;θ2&lt;⋯&lt;θn&lt;π20&lt;\\theta_1&lt;\\theta_2&lt;\\dots&lt;\\theta_n&lt;\\frac\\pi2 0&lt;θ1​&lt;θ2​&lt;⋯&lt;θn​&lt;2π​ ⇒{sin⁡θi&gt;0(i=1,2,…,n)cot⁡θ1&gt;cot⁡θ2&gt;⋯&gt;cot⁡θn\\Rightarrow\\left\\{ \\begin{aligned} \\sin\\theta_i&amp;&gt;&amp;0(i=1,2,\\dots,n) \\\\ \\cot\\theta_1&amp;&gt;&amp;\\cot\\theta_2&gt;\\dots&gt;\\cot\\theta_n \\end{aligned} \\right. ⇒{sinθi​cotθ1​​&gt;&gt;​0(i=1,2,…,n)cotθ2​&gt;⋯&gt;cotθn​​ cot⁡θ1&gt;cot⁡θi&gt;cot⁡θn(i=2,3,…,n−1)\\cot\\theta_1&gt;\\cot\\theta_i&gt;\\cot\\theta_n(i=2,3,\\dots,n-1) cotθ1​&gt;cotθi​&gt;cotθn​(i=2,3,…,n−1) ⇒cot⁡θ1sin⁡θi&gt;cos⁡θi&gt;cot⁡θnsin⁡θi\\Rightarrow\\cot\\theta_1\\sin\\theta_i&gt;\\cos\\theta_i&gt;\\cot\\theta_n\\sin\\theta_i ⇒cotθ1​sinθi​&gt;cosθi​&gt;cotθn​sinθi​ ⇒cot⁡θ1⋅∑i=1nsin⁡θi&gt;∑i=1ncos⁡θi&gt;cot⁡θn⋅∑i=1nsin⁡θi\\Rightarrow\\cot\\theta_1\\cdot\\sum^n_{i=1}\\sin\\theta_i&gt;\\sum^n_{i=1}\\cos\\theta_i&gt;\\cot\\theta_n\\cdot\\sum^n_{i=1}\\sin\\theta_i ⇒cotθ1​⋅i=1∑n​sinθi​&gt;i=1∑n​cosθi​&gt;cotθn​⋅i=1∑n​sinθi​ ∑i=1nsin⁡θi&gt;0⇒cot⁡θn&lt;∑i=1ncos⁡θi∑i=1nsin⁡θi&lt;cot⁡θ1\\sum^n_{i=1}\\sin\\theta_i&gt;0\\Rightarrow\\cot\\theta_n&lt;\\frac{\\sum^n_{i=1}\\cos\\theta_i}{\\sum^n_{i=1}\\sin\\theta_i}&lt;\\cot\\theta_1 i=1∑n​sinθi​&gt;0⇒cotθn​&lt;∑i=1n​sinθi​∑i=1n​cosθi​​&lt;cotθ1​","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"一道三角恒等式的简单题","slug":"一道三角恒等式的简单题","date":"2019-03-27T15:52:35.000Z","updated":"2019-04-17T09:48:52.541Z","comments":true,"path":"2019/03/27/一道三角恒等式的简单题/","link":"","permalink":"http://milarodvia.github.io/2019/03/27/一道三角恒等式的简单题/","excerpt":"","text":"求证：（命题351351351） f(n)=∑m=0n−1sin⁡(θ+mα)=sin⁡nα2sin⁡α2sin⁡[θ+(n−1)α2]f(n)=\\sum^{n-1}_{m=0}\\sin(\\theta+m\\alpha)=\\frac{\\sin\\frac{n\\alpha}2}{\\sin\\frac\\alpha2}\\sin[\\theta+\\frac{(n-1)\\alpha}2] f(n)=m=0∑n−1​sin(θ+mα)=sin2α​sin2nα​​sin[θ+2(n−1)α​] 使用第一数学归纳法进行证明： 当n=1n=1n=1时，命题显然成立。 设当n=kn=kn=k时，命题成立，即： ​ f(k)=∑m=0k−1sin⁡(θ+mα)=sin⁡kα2sin⁡α2sin⁡[θ+(n−1)α2]f(k)=\\sum^{k-1}_{m=0}\\sin(\\theta+m\\alpha)=\\frac{\\sin\\frac{k\\alpha}2}{\\sin\\frac\\alpha2}\\sin[\\theta+\\frac{(n-1)\\alpha}2] f(k)=m=0∑k−1​sin(θ+mα)=sin2α​sin2kα​​sin[θ+2(n−1)α​] 当n=k+1n=k+1n=k+1时，有： f(k+1)=f(k)+sin⁡(θ+kα)f(k+1)=f(k)+\\sin(\\theta+k\\alpha) f(k+1)=f(k)+sin(θ+kα) 观察f(k+1)f(k+1)f(k+1)，得到： =sin⁡kα2sin⁡α2sin⁡[θ+(k−1)α2]+sin⁡(θ+kα)=\\frac{\\sin\\frac{k\\alpha}2}{\\sin\\frac\\alpha2}\\sin[\\theta+\\frac{(k-1)\\alpha}2]+\\sin(\\theta+k\\alpha) =sin2α​sin2kα​​sin[θ+2(k−1)α​]+sin(θ+kα) =1sin⁡α2{sin⁡kα2sin⁡[θ+(k−1)α2]+sin⁡α2sin⁡(θ+kα)}=\\frac1{\\sin\\frac\\alpha2}\\{\\sin\\frac{k\\alpha}2\\sin[\\theta+\\frac{(k-1)\\alpha}2]+\\sin\\frac\\alpha2\\sin(\\theta+k\\alpha)\\} =sin2α​1​{sin2kα​sin[θ+2(k−1)α​]+sin2α​sin(θ+kα)} =12sin⁡α2{[cos⁡(θ−α2)−cos⁡(θ+kα−α2)]+[cos⁡(θ+kα−α2)−cos⁡(θ+kα+α2)]}=\\frac1{2\\sin\\frac\\alpha2}\\{[\\cos(\\theta-\\frac\\alpha2)-\\cos(\\theta+k\\alpha-\\frac\\alpha2)]+[\\cos(\\theta+k\\alpha-\\frac\\alpha2)-\\cos(\\theta+k\\alpha+\\frac\\alpha2)]\\} =2sin2α​1​{[cos(θ−2α​)−cos(θ+kα−2α​)]+[cos(θ+kα−2α​)−cos(θ+kα+2α​)]} =12sin⁡α2[cos⁡(θ−α2)−cos⁡(θ+kα+α2)]=\\frac1{2\\sin\\frac\\alpha2}[\\cos(\\theta-\\frac\\alpha2)-\\cos(\\theta+k\\alpha+\\frac\\alpha2)] =2sin2α​1​[cos(θ−2α​)−cos(θ+kα+2α​)] =12sin⁡α2⋅2sin⁡(θ+kα2)sin⁡(k+1)α2=\\frac1{2\\sin\\frac\\alpha2}\\cdot2\\sin(\\theta+\\frac{k\\alpha}2)\\sin\\frac{(k+1)\\alpha}2 =2sin2α​1​⋅2sin(θ+2kα​)sin2(k+1)α​ =sin⁡(k+1)α2sin⁡α2sin⁡(θ+kα2)=\\frac{\\sin\\frac{(k+1)\\alpha}2}{\\sin\\frac\\alpha2}\\sin(\\theta+\\frac{k\\alpha}2) =sin2α​sin2(k+1)α​​sin(θ+2kα​) 同理也可以证明： g(n)=∑m=0n−1cos⁡(θ+mα)=sin⁡nα2sin⁡α2cos⁡[θ+(n−1)α2]g(n)=\\sum^{n-1}_{m=0}\\cos(\\theta+m\\alpha)=\\frac{\\sin\\frac{n\\alpha}2}{\\sin\\frac\\alpha2}\\cos[\\theta+\\frac{(n-1)\\alpha}2] g(n)=m=0∑n−1​cos(θ+mα)=sin2α​sin2nα​​cos[θ+2(n−1)α​] ​","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"贝努利不等式的证明","slug":"贝努利不等式的证明","date":"2019-03-25T17:33:34.000Z","updated":"2019-04-17T09:49:16.591Z","comments":true,"path":"2019/03/26/贝努利不等式的证明/","link":"","permalink":"http://milarodvia.github.io/2019/03/26/贝努利不等式的证明/","excerpt":"","text":"贝努利不等式是数学中十分重要的不等式： 1+∑i=1nxi&lt;∏i=1n(1+xi)1+\\sum^n_{i=1}x_i&lt;\\prod^n_{i=1}(1+x_i) 1+i=1∑n​xi​&lt;i=1∏n​(1+xi​) 其中n≥2n\\geq2n≥2，非零实数x1,x2,…,xnx_1,x_2,\\dots,x_nx1​,x2​,…,xn​均大于−1-1−1且同号。 证明：使用第一数学归纳法进行证明： 当n=2n=2n=2时： 考察不等式左边： 1+∑i=12xi=1+x1+x21+\\sum^2_{i=1}x_i=1+x_1+x_2 1+i=1∑2​xi​=1+x1​+x2​ 考察不等式右边： ∏i=12(1+xi)=(1+x1)(1+x2)=1+x1+x2+x1x2\\prod^2_{i=1}(1+x_i)=(1+x_1)(1+x_2)=1+x_1+x_2+x_1x_2 i=1∏2​(1+xi​)=(1+x1​)(1+x2​)=1+x1​+x2​+x1​x2​ 因为x1x2&gt;0x_1x_2&gt;0x1​x2​&gt;0，所以当n=2n=2n=2时，不等式成立。 设当n=kn=kn=k时不等式成立，即： 1+∑i=1kxi&lt;∏i=1k(1+xi)1+\\sum^k_{i=1}x_i&lt;\\prod^k_{i=1}(1+x_i) 1+i=1∑k​xi​&lt;i=1∏k​(1+xi​) 当n=k+1n=k+1n=k+1时： 因为1+xk+1&gt;01+x_{k+1}&gt;01+xk+1​&gt;0所以有： ∏i=1k+1(1+xi)&gt;(1+∑i=1kxi)(1+xk+1)\\prod^{k+1}_{i=1}(1+x_i)&gt;(1+\\sum^k_{i=1}x_i)(1+x_{k+1}) i=1∏k+1​(1+xi​)&gt;(1+i=1∑k​xi​)(1+xk+1​) =1+∑i=1kxi+(1+∑i=1kxi)xk+1=1+\\sum^k_{i=1}x_i+(1+\\sum^k_{i=1}x_i)x_{k+1} =1+i=1∑k​xi​+(1+i=1∑k​xi​)xk+1​ =1+∑i=1k+1xi+(1+∑i=1kxi)xk+1=1+\\sum^{k+1}_{i=1}x_i+(1+\\sum^k_{i=1}x_i)x_{k+1} =1+i=1∑k+1​xi​+(1+i=1∑k​xi​)xk+1​ &gt;1+∑i=1k+1xi&gt;1+\\sum^{k+1}_{i=1}x_i &gt;1+i=1∑k+1​xi​ 因此，当n=k+1n=k+1n=k+1时，命题成立。 综上，不等式获证。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"一道三角恒等式题的证明","slug":"一道三角恒等式题的证明","date":"2019-03-23T17:14:21.000Z","updated":"2019-04-17T09:48:49.445Z","comments":true,"path":"2019/03/24/一道三角恒等式题的证明/","link":"","permalink":"http://milarodvia.github.io/2019/03/24/一道三角恒等式题的证明/","excerpt":"","text":"求证： ∏k=17cos⁡kπ15=[∑k=02cos⁡(2k+1)π7]7\\prod^7_{k=1}\\cos\\frac{k\\pi}{15}=[\\sum^2_{k=0}\\cos\\frac{(2k+1)\\pi}7]^7 k=1∏7​cos15kπ​=[k=0∑2​cos7(2k+1)π​]7 (命题567567567) 先证明一个引理（命题563563563）： ∏i=0n−1(x2−2xcos⁡iπn+1)=∑i=1nx2(n−i)\\prod^{n-1}_{i=0}(x^2-2x\\cos\\frac{i\\pi}n+1)=\\sum^n_{i=1}x^{2(n-i)} i=0∏n−1​(x2−2xcosniπ​+1)=i=1∑n​x2(n−i) 方程x2n−1=0x^{2n}-1=0x2n−1=0的根是: xk=cos⁡kπn+isin⁡kπn(k=0,1,2,…,2n−1)x_k=\\cos\\frac{k\\pi}n+i\\sin\\frac{k\\pi}n(k=0,1,2,\\dots,2n-1) xk​=cosnkπ​+isinnkπ​(k=0,1,2,…,2n−1) ⇒∏i=02n−1(x−xi)≡x2n−1\\Rightarrow\\prod^{2n-1}_{i=0}(x-x_i)\\equiv x^{2n}-1 ⇒i=0∏2n−1​(x−xi​)≡x2n−1 注意到： ∏i=02n−1(x−xi)\\prod^{2n-1}_{i=0}(x-x_i) i=0∏2n−1​(x−xi​) =[(x−1)∏k=1n−1(x−cos⁡kπn−isin⁡kπn)][(x+1)∏k=n+12n−1(x−cos⁡kπn−isin⁡kπn)]=[(x-1)\\prod^{n-1}_{k=1}(x-\\cos\\frac{k\\pi}n-i\\sin\\frac{k\\pi}n)][(x+1)\\prod^{2n-1}_{k=n+1}(x-\\cos\\frac{k\\pi}n-i\\sin\\frac{k\\pi}n)] =[(x−1)k=1∏n−1​(x−cosnkπ​−isinnkπ​)][(x+1)k=n+1∏2n−1​(x−cosnkπ​−isinnkπ​)] =(x2−1)∏k=1n−1[(x−cos⁡kπn)2+sin⁡2kπn]=(x^2-1)\\prod^{n-1}_{k=1}[(x-\\cos\\frac{k\\pi}n)^2+\\sin^2\\frac{k\\pi}n] =(x2−1)k=1∏n−1​[(x−cosnkπ​)2+sin2nkπ​] =(x2−1)∏k=1n−1(x2−2xcos⁡kπn+1)=(x^2-1)\\prod^{n-1}_{k=1}(x^2-2x\\cos\\frac{k\\pi}n+1) =(x2−1)k=1∏n−1​(x2−2xcosnkπ​+1) x2n−1=(x2−1)∑i=1nx2(n−i)x^{2n}-1=(x^2-1)\\sum^n_{i=1}x^{2(n-i)} x2n−1=(x2−1)i=1∑n​x2(n−i) ⇒∏i=1n−1(x2−2xcos⁡iπn+1)=∑i=1nx2(n−i)\\Rightarrow\\prod^{n-1}_{i=1}(x^2-2x\\cos\\frac{i\\pi}n+1)=\\sum^n_{i=1}x^{2(n-i)} ⇒i=1∏n−1​(x2−2xcosniπ​+1)=i=1∑n​x2(n−i) 再证明一个基本的三角恒等式（命题564564564)： 由上一个引理： ∏i=1n−1(x2−2xcos⁡iπn+1)=∑i=1nx2(n−i)\\prod^{n-1}_{i=1}(x^2-2x\\cos\\frac{i\\pi}n+1)=\\sum^n_{i=1}x^{2(n-i)} i=1∏n−1​(x2−2xcosniπ​+1)=i=1∑n​x2(n−i) 令x=−1x=-1x=−1，则有： ∏i=1ncos⁡iπ2n+1=1xn\\prod^n_{i=1}\\cos\\frac{i\\pi}{2n+1}=\\frac1{x^n} i=1∏n​cos2n+1iπ​=xn1​ 现在证明原命题： 由三角恒等式得： ∏k=17cos⁡kπ15=127\\prod^7_{k=1}\\cos\\frac{k\\pi}{15}=\\frac1{2^7} k=1∏7​cos15kπ​=271​ 考察等式右边： ∑k=02cos⁡(2k+1)π7=cos⁡π7+cos⁡3π7+cos⁡5π7\\sum^2_{k=0}\\cos\\frac{(2k+1)\\pi}7=\\cos\\frac\\pi7+\\cos\\frac{3\\pi}7+\\cos\\frac{5\\pi}7 k=0∑2​cos7(2k+1)π​=cos7π​+cos73π​+cos75π​ =−(cos⁡2π7+cos⁡4π7+cos⁡6π7)=-(\\cos\\frac{2\\pi}7+\\cos\\frac{4\\pi}7+\\cos\\frac{6\\pi}7) =−(cos72π​+cos74π​+cos76π​) =−2sin⁡π7cos⁡2π7+2sin⁡π7cos⁡4π7+2sin⁡π7cos⁡6π72sin⁡π7=-\\frac{2\\sin\\frac\\pi7\\cos\\frac{2\\pi}7+2\\sin\\frac\\pi7\\cos\\frac{4\\pi}7+2\\sin\\frac\\pi7\\cos\\frac{6\\pi}7}{2\\sin\\frac\\pi7} =−2sin7π​2sin7π​cos72π​+2sin7π​cos74π​+2sin7π​cos76π​​ =−sin⁡3π7−sin⁡π7+sin⁡5π7−sin⁡3π7+sin⁡7π7−sin⁡5π72sin⁡π7=-\\frac{\\sin\\frac{3\\pi}7-\\sin\\frac\\pi7+\\sin\\frac{5\\pi}7-\\sin\\frac{3\\pi}7+\\sin\\frac{7\\pi}7-\\sin\\frac{5\\pi}7}{2\\sin\\frac\\pi7} =−2sin7π​sin73π​−sin7π​+sin75π​−sin73π​+sin77π​−sin75π​​ =−(−12)=12=-(-\\frac12)=\\frac12 =−(−21​)=21​ 因为127=(12)7\\frac1{2^7}=(\\frac12)^7271​=(21​)7，所以命题得证。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"一个实用的四点共圆的定理的证明","slug":"一个实用的四点共圆的定理的证明","date":"2019-03-23T16:39:27.000Z","updated":"2019-04-17T09:48:43.798Z","comments":true,"path":"2019/03/24/一个实用的四点共圆的定理的证明/","link":"","permalink":"http://milarodvia.github.io/2019/03/24/一个实用的四点共圆的定理的证明/","excerpt":"","text":"若： PCsin⁡α+PAsin⁡β=PBsin⁡(α+β)PC\\sin\\alpha+PA\\sin\\beta=PB\\sin(\\alpha+\\beta) PCsinα+PAsinβ=PBsin(α+β) 则：P,A,B,CP,A,B,CP,A,B,C四点共圆。 联结ACACAC，作△PAC\\triangle PAC△PAC的外接圆⊙O\\odot O⊙O。⊙O\\odot O⊙O交射线PBPBPB与点B′B&#x27;B′。连AB′,B′CAB&#x27;,B&#x27;CAB′,B′C。 设⊙O\\odot O⊙O的半径为RRR，则： {AB′=2Rsin⁡αB′C=2Rsin⁡βAC=2Rsin⁡(α+β)\\left\\{ \\begin{aligned} AB&#x27; &amp; = &amp; 2R\\sin\\alpha \\\\ B&#x27;C &amp; = &amp; 2R\\sin\\beta \\\\ AC &amp; = &amp; 2R\\sin(\\alpha+\\beta) \\end{aligned} \\right. ⎩⎪⎨⎪⎧​AB′B′CAC​===​2Rsinα2Rsinβ2Rsin(α+β)​ 在圆内接四边形PAB′CPAB&#x27;CPAB′C中，根据托勒密定理有： PC⋅AB′+PA⋅B′C=AC⋅PB′PC\\cdot AB&#x27;+PA\\cdot B&#x27;C=AC\\cdot PB&#x27; PC⋅AB′+PA⋅B′C=AC⋅PB′ 故： PCsin⁡α+PAsin⁡β=PB′sin⁡(α+β)PC\\sin\\alpha+PA\\sin\\beta=PB&#x27;\\sin(\\alpha+\\beta) PCsinα+PAsinβ=PB′sin(α+β) 所以PB′=PBPB&#x27;=PBPB′=PB，点B′B&#x27;B′和点BBB重合。 因此，点P,A,B,CP,A,B,CP,A,B,C四点共圆。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"一道出自第57届乌克兰数学奥林匹克竞赛(2017-10-8)的不等式证明","slug":"一道出自第57届乌克兰数学奥林匹克竞赛(2017-10-8)的不等式证明","date":"2019-03-23T16:00:25.000Z","updated":"2019-04-17T09:49:05.609Z","comments":true,"path":"2019/03/24/一道出自第57届乌克兰数学奥林匹克竞赛(2017-10-8)的不等式证明/","link":"","permalink":"http://milarodvia.github.io/2019/03/24/一道出自第57届乌克兰数学奥林匹克竞赛(2017-10-8)的不等式证明/","excerpt":"","text":"已知a,b,c∈R+a,b,c\\in R_+a,b,c∈R+​，证明： ∑(a−b)2ab+∑ab≥∑3bc+ac−ab2ab+ac\\sum\\frac{(a-b)^2}{ab}+\\sum\\frac ab\\geq\\sum\\frac{3bc+ac-ab}{2ab+ac} ∑ab(a−b)2​+∑ba​≥∑2ab+ac3bc+ac−ab​ 考察不等式左边，有： ∑(a−b)2ab+∑ab=∑(2ab+ba)−6\\sum\\frac{(a-b)^2}{ab}+\\sum\\frac ab=\\sum(\\frac{2a}b+\\frac ba)-6 ∑ab(a−b)2​+∑ba​=∑(b2a​+ab​)−6 考察不等式右边，有： ∑(3bc+ac−ab2ab+ac+2)=∑3(ab+bc+ca)2ab+ac\\sum(\\frac{3bc+ac-ab}{2ab+ac}+2)=\\sum\\frac{3(ab+bc+ca)}{2ab+ac} ∑(2ab+ac3bc+ac−ab​+2)=∑2ab+ac3(ab+bc+ca)​ 因此，证明题设中的不等式与证明下面的不等式等价： ∑(2ab+ba)≥∑3(ab+bc+ac)2ab+ac\\sum(\\frac{2a}b+\\frac ba)\\geq\\sum\\frac{3(ab+bc+ac)}{2ab+ac} ∑(b2a​+ab​)≥∑2ab+ac3(ab+bc+ac)​ 注意到： (ab+ba+ac)(ab+ab+ac)≥(a+b+c)2≥3(ab+bc+ac)(\\frac ab+\\frac ba+\\frac ac)(ab+ab+ac)\\geq(a+b+c)^2\\geq3(ab+bc+ac) (ba​+ab​+ca​)(ab+ab+ac)≥(a+b+c)2≥3(ab+bc+ac) ⇒ab+ba+ca≥3(ab+bc+ac)2ab+ac\\Rightarrow\\frac ab+\\frac ba+\\frac ca\\geq\\frac{3(ab+bc+ac)}{2ab+ac} ⇒ba​+ab​+ac​≥2ab+ac3(ab+bc+ac)​ 同理: bc+cb+bc≥3(ab+bc+ac)2ab+ac,ac+ca+bc≥3(ab+bc+ac)2ab+ac\\frac bc+\\frac cb+\\frac bc\\geq\\frac{3(ab+bc+ac)}{2ab+ac} , \\frac ac+\\frac ca+\\frac bc\\geq\\frac{3(ab+bc+ac)}{2ab+ac} cb​+bc​+cb​≥2ab+ac3(ab+bc+ac)​,ca​+ac​+cb​≥2ab+ac3(ab+bc+ac)​ 三式相加，有： ∑(a−b)2ab+∑ab≥∑3bc+ac−ab2ab+ac\\sum\\frac{(a-b)^2}{ab}+\\sum\\frac ab\\geq\\sum\\frac{3bc+ac-ab}{2ab+ac} ∑ab(a−b)2​+∑ba​≥∑2ab+ac3bc+ac−ab​","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"一道IMO36不等式题的证明","slug":"一道IMO36不等式题的证明","date":"2019-03-23T15:42:55.000Z","updated":"2019-04-17T09:49:12.547Z","comments":true,"path":"2019/03/23/一道IMO36不等式题的证明/","link":"","permalink":"http://milarodvia.github.io/2019/03/23/一道IMO36不等式题的证明/","excerpt":"","text":"设a,b,c∈R+,abc=1a,b,c\\in R_+,abc=1a,b,c∈R+​,abc=1证明： ∑1a3(b+c)≥32\\sum\\frac1{a^3(b+c)}\\geq\\frac32 ∑a3(b+c)1​≥23​ 有： ∑[1a3(b+c)+a(b+c)4]≥∑1a\\sum[\\frac1{a^3(b+c)}+\\frac{a(b+c)}4]\\geq\\sum\\frac1a ∑[a3(b+c)1​+4a(b+c)​]≥∑a1​ 故： ∑1a3(b+c)≥∑1a−∑ab2\\sum\\frac1{a^3(b+c)}\\geq\\sum\\frac1a-\\sum\\frac{ab}2 ∑a3(b+c)1​≥∑a1​−∑2ab​ =∑1a−∑12c=∑12a≥12×3abc3=32=\\sum\\frac1a-\\sum\\frac1{2c}=\\sum\\frac1{2a}\\geq\\frac12\\times\\frac3{\\sqrt[3]{abc}}=\\frac32 =∑a1​−∑2c1​=∑2a1​≥21​×3abc​3​=23​ 证毕。","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"数学","slug":"题解/数学","permalink":"http://milarodvia.github.io/categories/题解/数学/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://milarodvia.github.io/tags/数学/"}]},{"title":"班级心情值统计方案","slug":"班级心情值统计方案","date":"2019-03-20T16:01:36.000Z","updated":"2019-05-19T05:32:46.785Z","comments":true,"path":"2019/03/21/班级心情值统计方案/","link":"","permalink":"http://milarodvia.github.io/2019/03/21/班级心情值统计方案/","excerpt":"","text":"写在前面的话 这是一个讲话的提纲，因此是不太完整的。对于这次讲话，我秉持的原则是： 打主意，对的多，错的少一点，就行了。不要总是以为自己对，好像真理都在自己手里。——毛泽东 因此我希望大家可以多多讨论，让我们一起来完善这个东西。 本提纲内的数据全由附录中的程序生成，可能不太科学，还请大家谅解。 我们更要广开言路，打开窗户，不要怕打开窗户可能吹进沙子来。进来一点尘土，坏处有一点，但并不大，而开窗户透空气的利益却很大，我们要从这种利害关系上，看这个问题。——毛泽东 版权说明 本提纲的全部内容在 CC BY-SA 4.0-署名-相同方式共享 4.0协议之条款下提供，附加条款亦可能应用。 班级心情值统计方法 心情状态的规定 为了使得统计顺利进行，我们规定下面三种心情状态： 开心（符号 ✓\\checkmark✓） 一般（符号◯\\bigcirc◯） 不好（符号×\\times×） 统计方法 建议使用普查的统计方法。心理委员应当向班级管理机构索要班级同学的名单（成绩单），然后一一进行统计。 统计时，应当对样本进行询问： 你今天开心吗？ 得到回答后，迅速辨别回答属于哪一个心情状态。如果样本的回答十分含糊，应当告知心情状态的分类，使其自己选择。 当样本在接受调查时出现异常表现时，应当注意。 关于抽样调查 抽样调查不被推荐。但是我们需要了解一下如何科学地使用抽样调查来获取班级同学的心情状态。 首先，先选定样本数量。假设下面是某班的人数： {男生=19女生=25总人数=44\\left\\{ \\begin{aligned} \\text{男生} &amp; = &amp; 19 \\\\ \\text{女生} &amp; = &amp; 25 \\\\ \\text{总人数} &amp; = &amp; 44 \\end{aligned} \\right. ⎩⎪⎨⎪⎧​男生女生总人数​===​192544​ 那么我们可以选择统计121212个男生，151515个女生。在空间上，还应该注意样本的分布应当满足尽可能的离散性。 关于心情状态统计结果的整理 假如我们统计到了下面的数据： 组别/状态 开心 一般 不好 男生 161616 999 131313 女生 333 111 222 总 191919 101010 151515 我们需要计算的数据有： 比值 应当分别为每一组计算每一项所占的比值（保留两位小数）： 组别/状态 开心-比 一般-比 不好-比 男生 16−42.11%16-42.11\\%16−42.11% 9−23.68%9-23.68\\%9−23.68% 13−34.21%13-34.21\\%13−34.21% 女生 3−50.00%3-50.00\\%3−50.00% 1−16.67%1-16.67\\%1−16.67% 2−33.33%2-33.33\\%2−33.33% 总 19−43.18%19-43.18\\%19−43.18% 10−22.73%10-22.73\\%10−22.73% 15−34.09%15-34.09\\%15−34.09% 如果条件允许，还可以画一个蛋糕来直观地体现班级心情状态的分布情况： 同理，也可以绘制男生女生的心情状态分布情况的蛋糕： 心情值的计算方法 为了计算心情值，我们赋予三种心情状态以不同的权值： 开心（符号 ✓\\checkmark✓）：222 一般（符号◯\\bigcirc◯）：111 不好（符号×\\times×）： 000 我们赋予心情值以一定的数学意义。从某种程度上来说，所谓心情值就是数学期望。 依然以上面的那个统计结果为例： 组别/状态 开心 一般 不好 男生 161616 999 131313 女生 333 111 222 总 191919 101010 151515 那么，我们可以根据心情值的计算公式： E=∑i=0∣a∣aidi∣a∣E=\\frac{\\sum^{|a|}_{i=0}a_id_i}{|a|} E=∣a∣∑i=0∣a∣​ai​di​​ 计算得： {E男生=16×2+9×1+13×038≈1.08E女生=3×2+1×1+2×06≈1.17E总=19×2+10×1+15×044≈1.09\\left\\{ \\begin{aligned} E_\\text{男生} &amp; = &amp; \\frac{16\\times2+9\\times1+13\\times0}{38}\\approx1.08 \\\\ E_\\text{女生} &amp; = &amp; \\frac{3\\times2+1\\times1+2\\times0}{6}\\approx1.17 \\\\ E_\\text{总} &amp; = &amp; \\frac{19\\times2+10\\times1+15\\times0}{44}\\approx1.09 \\end{aligned} \\right. ⎩⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎧​E男生​E女生​E总​​===​3816×2+9×1+13×0​≈1.0863×2+1×1+2×0​≈1.174419×2+10×1+15×0​≈1.09​ 追踪性质的数据观察 依然使用心情值的概念来考察样本的心情状态。假设某同学的历次统计情况是这样的： ✓,✓,✓,×,✓\\checkmark,\\checkmark,\\checkmark,\\times,\\checkmark✓,✓,✓,×,✓ 那么计算他的心情值为：E=4×2+1×05=1.6E=\\frac{4\\times2+1\\times0}5=1.6E=54×2+1×0​=1.6 再使用方差来考察样本的心情状态的稳定程度： S2=15[(2−1.6)2+(2−1.6)2+(2−1.6)2+(0−1.6)2+(2−1.6)2]=3.2S^2=\\frac15[(2-1.6)^2+(2-1.6)^2+(2-1.6)^2+(0-1.6)^2+(2-1.6)^2]=3.2 S2=51​[(2−1.6)2+(2−1.6)2+(2−1.6)2+(0−1.6)2+(2−1.6)2]=3.2 大数据的宏观标准 办公室应当在一定的时间内计算出全校的心情值状况。这个心情值将被作为标准进行使用。 例如，有三个班级的心情值结果是这样的： 班级 E男生E_\\text{男生}E男生​ E女生E_\\text{女生}E女生​ E总E_\\text{总}E总​ 111 1.081.081.08 1.171.171.17 1.091.091.09 222 0.400.400.40 1.561.561.56 0.950.950.95 333 0.620.620.62 0.990.990.99 0.970.970.97 那么，我们可以计算Eˉ总\\bar E_\\text{总}Eˉ总​: Eˉ总=1.09+0.95+0.973≈1.00\\bar E_\\text{总}=\\frac{1.09+0.95+0.97}3\\approx1.00 Eˉ总​=31.09+0.95+0.97​≈1.00 因为E1&gt;EˉE_1&gt;\\bar EE1​&gt;Eˉ，所以一班的心情水平超过平均水平——意味着一班同学的总体心情状态良好。 反之，E2,E3&lt;EˉE_2,E_3&lt;\\bar EE2​,E3​&lt;Eˉ，因此这两个班级的心情水平较差。 同理，我们也可以计算$$\\bar E_\\text{男生}$$和Eˉ女生\\bar E_\\text{女生}Eˉ女生​。 长期的数据整理 办公室应当做好数据的整理工作。建议以一星期为一个基本测评周期，即每周计算一次Eˉ\\bar EEˉ（三组）。 为了使数据更加可信，建议使用下面的整理方法： 首先，记录下该组新数据的第kkk组数据。 那么: Eˉnew=Eˉ×(k−1)+Ek\\bar E_{new}=\\frac{\\bar E \\times (k-1)+E}k Eˉnew​=kEˉ×(k−1)+E​ 办公室应当使用数据库技术对我校学生心情值数据进行长期的维护。 下面是统计图的示范： 统计分为下面几种统计： 周阶段统计 月阶段统计 年阶段统计 附录 心情值样例数据生成 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &lt;string.h&gt;void fixed(double&amp;,double&amp;,double&amp;); int main(void)&#123; system(\"title Random v1.0.0(dev.milarodvia.macrohard[github[x]])\"); srand(time(NULL)); int n; printf(\"Please enter a statistical sample size:\"); scanf(\"%d\",&amp;n); int gn=rand()%(n/2)+1,bn=n-gn; int b[bn],g[gn],c[3]=&#123;0&#125;,bc[3]=&#123;0&#125;,gc[3]=&#123;0&#125;; memset(b,0,bn); memset(g,0,gn); //!Warning!:If the array `int c[]`,'int bc[]` and 'int gc[]` is not set to 0, then an irreversible data error will occur! //c[0] stands for \"statistics with a weight of 0\", and the rest is the same. puts(\"Prepare for data generation(for boy group)... ...\"); _sleep(100);//sleep for a while. for(int i=0;i&lt;bn;++i)//range(i,gn) &#123; printf(\"Generating Group %d data... ...\\n\",i+1); ++c[b[i]=rand()%3]; ++bc[b[i]]; printf(\"[%d|boy|(c[b[i]]=%d)]:%d.\\n\",i+1,c[b[i]],b[i]); &#125; puts(\"Prepare for data generation(for boy group)... ...\"); _sleep(100);//sleep for a while. for(int i=0;i&lt;gn;++i)//range(i,gn) &#123; printf(\"Generating Group %d data... ...\\n\",i+1); ++c[g[i]=rand()%3]; ++gc[g[i]]; printf(\"[%d|girl|(c[g[i]]=%d)]:%d.\\n\",i+1,c[g[i]],g[i]); &#125; puts(\"done.\"); puts(\"Prepare to calculate parameters... ...\"); _sleep(100);//sleep for a while. double d0,d1,d2; d0=c[0]*1.0/n*1.0; d1=c[1]*1.0/n*1.0; d2=c[2]*1.0/n*1.0; fixed(d0,d1,d2); puts(\"The overall mood state distribution of whole class:\"); printf(\"%d|d0=%.4lf\\t%d|d1=%.4lf\\t%d|d2=%.4lf\\n\",c[0],d0,c[1],d1,c[2],d2); //printf(\"The mood value of whole class:%.4lf\\n\",(c[2]*2+c[1])/n*1.0); d0=bc[0]*1.0/bn; d1=bc[1]*1.0/bn; d2=bc[2]*1.0/bn; fixed(d0,d1,d2); printf(\"The overall mood state distribution of %d boys:\\n\",bn); printf(\"%d|d0=%.4lf\\t%d|d1=%.4lf\\t%d|d2=%.4lf\\n\",bc[0],d0,b[1],d1,bc[2],d2); //printf(\"The mood value of boys:%.4lf\\n\",(bc[2]*2+bc[1])/bn*1.0); d0=gc[0]*1.0/gn; d1=gc[1]*1.0/gn; d2=gc[2]*1.0/gn; fixed(d0,d1,d2); printf(\"The overall mood state distribution of %d girls:\\n\",gn); printf(\"%d|d0=%.4lf\\t%d|d1=%.4lf\\t%d|d2=%.4lf\\n\",gc[0],d0,gc[1],d1,gc[2],d2); //printf(\"The mood value of girls:%.4lf\\n\",(gc[2]*2+gc[1])/gn*1.0); return 0;&#125;void fixed(double&amp; d0,double&amp; d1,double&amp; d2)&#123; const double s=1.0; //the standard. char buf[32]; //the buffer sprintf(buf,\"%.4lf %.4lf %.4lf\",d0,d1,d2); sscanf(buf,\"%lf%lf%lf\",&amp;d0,&amp;d1,&amp;d2); double t=d0+d1+d2; if(t==s)return; if(t&lt;s)d1+=(s-t); //try to fix the bad data else d1-=(t-s); //another way to fix the bad data return; &#125; 数据样例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899Please enter a statistical sample size:44Prepare for data generation(for boy group)... ...Generating Group 1 data... ...[1|boy|(c[b[i]]=1)]:0.Generating Group 2 data... ...[2|boy|(c[b[i]]=1)]:2.Generating Group 3 data... ...[3|boy|(c[b[i]]=1)]:1.Generating Group 4 data... ...[4|boy|(c[b[i]]=2)]:0.Generating Group 5 data... ...[5|boy|(c[b[i]]=2)]:2.Generating Group 6 data... ...[6|boy|(c[b[i]]=3)]:0.Generating Group 7 data... ...[7|boy|(c[b[i]]=3)]:2.Generating Group 8 data... ...[8|boy|(c[b[i]]=2)]:1.Generating Group 9 data... ...[9|boy|(c[b[i]]=4)]:0.Generating Group 10 data... ...[10|boy|(c[b[i]]=3)]:1.Generating Group 11 data... ...[11|boy|(c[b[i]]=4)]:1.Generating Group 12 data... ...[12|boy|(c[b[i]]=4)]:2.Generating Group 13 data... ...[13|boy|(c[b[i]]=5)]:2.Generating Group 14 data... ...[14|boy|(c[b[i]]=6)]:2.Generating Group 15 data... ...[15|boy|(c[b[i]]=7)]:2.Generating Group 16 data... ...[16|boy|(c[b[i]]=5)]:0.Generating Group 17 data... ...[17|boy|(c[b[i]]=5)]:1.Generating Group 18 data... ...[18|boy|(c[b[i]]=6)]:0.Generating Group 19 data... ...[19|boy|(c[b[i]]=7)]:0.Generating Group 20 data... ...[20|boy|(c[b[i]]=6)]:1.Generating Group 21 data... ...[21|boy|(c[b[i]]=8)]:0.Generating Group 22 data... ...[22|boy|(c[b[i]]=9)]:0.Generating Group 23 data... ...[23|boy|(c[b[i]]=8)]:2.Generating Group 24 data... ...[24|boy|(c[b[i]]=7)]:1.Generating Group 25 data... ...[25|boy|(c[b[i]]=9)]:2.Generating Group 26 data... ...[26|boy|(c[b[i]]=10)]:2.Generating Group 27 data... ...[27|boy|(c[b[i]]=11)]:2.Generating Group 28 data... ...[28|boy|(c[b[i]]=10)]:0.Generating Group 29 data... ...[29|boy|(c[b[i]]=11)]:0.Generating Group 30 data... ...[30|boy|(c[b[i]]=12)]:0.Generating Group 31 data... ...[31|boy|(c[b[i]]=13)]:0.Generating Group 32 data... ...[32|boy|(c[b[i]]=14)]:0.Generating Group 33 data... ...[33|boy|(c[b[i]]=8)]:1.Generating Group 34 data... ...[34|boy|(c[b[i]]=12)]:2.Generating Group 35 data... ...[35|boy|(c[b[i]]=13)]:2.Generating Group 36 data... ...[36|boy|(c[b[i]]=9)]:1.Generating Group 37 data... ...[37|boy|(c[b[i]]=15)]:0.Generating Group 38 data... ...[38|boy|(c[b[i]]=16)]:0.Prepare for data generation(for boy group)... ...Generating Group 1 data... ...[1|girl|(c[g[i]]=10)]:1.Generating Group 2 data... ...[2|girl|(c[g[i]]=14)]:2.Generating Group 3 data... ...[3|girl|(c[g[i]]=17)]:0.Generating Group 4 data... ...[4|girl|(c[g[i]]=15)]:2.Generating Group 5 data... ...[5|girl|(c[g[i]]=18)]:0.Generating Group 6 data... ...[6|girl|(c[g[i]]=19)]:0.done.Prepare to calculate parameters... ...The overall mood state distribution of whole class:19|d0=0.4318 10|d1=0.2273 15|d2=0.3409The overall mood state distribution of 38 boys:16|d0=0.4211 2|d1=0.2368 13|d2=0.3421The overall mood state distribution of 6 girls:3|d0=0.5000 1|d1=0.1667 2|d2=0.3333 建议使用新的表格 组别/项目 开心人数-比 一般人数-比 不开心人数-比 心情值 男生 %d-%.2lf\\% %d-%.2lf\\% %d-%.2lf\\% %.2lf 女生 %d-%.2lf\\% %d-%.2lf\\% %d-%.2lf\\% %.2lf 总 %d-%.2lf\\% %d-%.2lf\\% %d-%.2lf\\% %.2lf","categories":[{"name":"实践资料","slug":"实践资料","permalink":"http://milarodvia.github.io/categories/实践资料/"},{"name":"心理学","slug":"实践资料/心理学","permalink":"http://milarodvia.github.io/categories/实践资料/心理学/"}],"tags":[{"name":"心理学","slug":"心理学","permalink":"http://milarodvia.github.io/tags/心理学/"}]},{"title":"资本主义劳动生产的秘密","slug":"资本主义劳动生产的秘密","date":"2018-12-03T17:14:10.000Z","updated":"2019-04-03T06:37:24.813Z","comments":true,"path":"2018/12/04/资本主义劳动生产的秘密/","link":"","permalink":"http://milarodvia.github.io/2018/12/04/资本主义劳动生产的秘密/","excerpt":"","text":"在资本主义世界之中，劳动生产有着许多奇怪的特点。众所周知，这种生产是以拥有生产资料的资本家与除劳动力外一无所有的无产者所主导的。那么，在这种充斥着整个资本主义世界的劳动生产模式之中，有着什么样的秘密呢？ 我们先来看看，这种生产所产出的东西是什么：汽车，铅笔，面包……总之，是商品。**商品是一种可以满足人的某种欲望的物体。**这种欲望的性质如何，例如是由胃产生的还是由幻想产生的，与问题是无关的。欲望包含着需要，这是精神的食欲，就像肉体的饥饿一样自然。这种满足欲望的方式如何，例如是作为生活资料，即消费品来直接满足或是作为生产资料来间接满足，与问题也是无关的。 **每一种有用的物体，如面包，衣服等等，是许多属性的总和，因此可以被应用在很多不同的方面。**列如衣服既可以用来保暖御寒，也可以被当做燃料烧掉。发现这些属性，从而发现物体的多种使用方式，是历史的事情，我们不关心这一过程。 **物体的有用性使物体成为使用价值。**但这种使用价值是取决于商品本身的属性的，离开了具体的商品就不存在。所以，**商品本身就是使用价值，财物。**在考虑使用价值时，我们常常要以量为前提，因为一顿铁比铁要更有意义。 一切生产活动都是生产资料和劳动力的结合，因此，资本家若是想进行生产，就必须支付生产资料的价值与劳动力的价值。生产资料的价值，体现为为生产生产资料所累积耗费的劳动力的死的价值。而劳动力的价值则体现在维持劳动力再生所需的生活资料的最低额。 结合商品来看，生产过程中消耗的生产资料的价值与商品价值中生产资料的部分的价值是固定的，不变的。而劳动力体创造出的，固化在商品价值中的价值却是活的，可变的。也就是说，由劳动创造出来的价值和生产过程中耗费的劳动力的价值可以不对等。马克思主义政治经济学将这一多出的价值部分称为剩余价值。 举一个例子。假设一批商品值500050005000元，其中含生产资料部分300030003000元和劳动力部分200020002000元。不过，在工作的这一段时间内，维持工人的基本生活却只要价值120012001200元的生活资料。这800800800元的剩余价值也正是资本家所谓利润的来源。 剩余价值是工人创造的。而资本家却凭借着对生产资料的占有而无偿占有了这一部分。这样的无偿占有也就是马克思主义语境下的剥削。 反应在现实中，占有各类企业的资本家越来越富，他们挥金如土，享用着各种社会优质资源；而以出卖劳动力为生的工人却相对越来越穷，他们只能拿着微薄的工资勉强维生。先不说这种无偿占有是否公平合理——讲人道主义尽管慷慨激昂，却缺乏实际作用。让我们来一起分析一下这种无偿占有所导致的一般性的结果。 经济是社会的基础。在资本主义市场中，卖家的主体是资本家，而买家的主体则是工人。但是，工人们拿着被剥削后的工资，显然是不能买下市场上所有的商品的。资本家为了进行下一轮生产，也不可能将所有的货币用于购买商品。这样，市场上必然会有大量的商品无法转换为货币，我们称之为过剩商品。这时候的情况，就是购买力与生产力的不平衡，也就是说，生产力过剩了。 在实际的生产活动中，资本家对剩余价值的占有虽然算不上是什么损失，但是生产资料和劳动力的价值确实真真切切地损失掉了。因此，资本主义生产越是进行，也就有越来越多的商品无法得到消费，越来越多的价值被浪费。这个恶性循环周而复始，所导致的必然后果就是：经济危机。 在经济危机中，企业破产倒闭，大量失业工人被抛向街头，到处都是经济崩溃的悲惨景象。自十九世纪初英国第一次经济危机后，这样的经济危机已经愈演愈烈重复了数十次。这个周期至今还在运转。更糟糕的是，随着资本主义世界市场的建立与发展，经济危机危害的不仅仅是单个资本主义国家，甚至还会危及到整个资本主义世界。 面对着这种危及社会全领域的毁灭性的灾难，资产阶级用什么办法来克服这种危机呢？一方面不得不消灭大量生产力，另一方面夺取新的市场，或更加彻底地利用旧的市场。这究竟是怎样的一种办法呢？这不过是资产阶级准备更全面更猛烈的危机的办法，不过是使防止危机的手段越来越少的办法。 面对经济危机，资本家宁愿把商品销毁掉也不愿让出自己无偿占有的剩余价值。 面对资本主义社会，各色改良主义喋喋不休，而马克思主义却道出了最根本的问题：**生产的社会化和生产资料的私人占有是资本主义社会的根本矛盾。**这种矛盾所带来的，出来经济危机，还有资本主义社会的必然灭亡与社会主义革命的必然胜利。 资产阶级的必然灭亡与无产阶级的必然胜利这一论点已经超出了本文的讨论范围，笔者将在《为什么说英特纳雄耐尔就一定要实现》中论述。 全世界无产者，联合起来！ ——献给伟大的无产阶级战士王鹏一同志","categories":[{"name":"论文","slug":"论文","permalink":"http://milarodvia.github.io/categories/论文/"},{"name":"马克思主义","slug":"论文/马克思主义","permalink":"http://milarodvia.github.io/categories/论文/马克思主义/"}],"tags":[{"name":"马克思主义","slug":"马克思主义","permalink":"http://milarodvia.github.io/tags/马克思主义/"}]},{"title":"LGP1601-A+B Problem（高精）","slug":"LGP1601-A-B-Problem（高精）","date":"2018-11-17T19:15:12.000Z","updated":"2019-04-17T09:28:44.356Z","comments":true,"path":"2018/11/18/LGP1601-A-B-Problem（高精）/","link":"","permalink":"http://milarodvia.github.io/2018/11/18/LGP1601-A-B-Problem（高精）/","excerpt":"","text":"使用了Java中的BigDecimal来进行高精度计算，下面是代码：（Java党的福利qwq）： 123456789101112131415161718192021import java.util.Scanner;import java.math.BigInteger;import java.math.BigDecimal;import java.text.DecimalFormat;class Main &#123; public static void main(String[] args)throws Exception &#123; Scanner input = new Scanner(System.in); while(input.hasNext()) &#123; BigDecimal a= input.nextBigDecimal(); BigDecimal b=input.nextBigDecimal(); BigDecimal c= a.add(b); BigDecimal d= c.stripTrailingZeros(); String s; s=d.toPlainString(); System.out.println(s); &#125; input.close(); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"OI","slug":"题解/OI","permalink":"http://milarodvia.github.io/categories/题解/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://milarodvia.github.io/tags/OI/"}]},{"title":"UVA11809-Floating Point Numbers","slug":"UVA11809-Floating-Point-Numbers","date":"2018-11-17T18:18:01.000Z","updated":"2019-04-17T09:28:40.316Z","comments":true,"path":"2018/11/18/UVA11809-Floating-Point-Numbers/","link":"","permalink":"http://milarodvia.github.io/2018/11/18/UVA11809-Floating-Point-Numbers/","excerpt":"","text":"这是一道很考验数学素质的一道题目。但是作为一名优秀每天划水的OIer，这道题是不难的。来看我的分析： 因为数字很大，因此我们可以求以101010为底的对数:lgv=lg(xM+1−1)−(M+)×lg2+(2E−1)×lg2=lgA+Blgv=lg(x^{M+1}-1)-(M+) \\times lg2+(2^E-1) \\times lg2=lgA+Blgv=lg(xM+1−1)−(M+)×lg2+(2E−1)×lg2=lgA+B。 根据题意可以推算出最大值vmax=(1−12M+1)×22E−1=A×10Bv_max=(1-\\frac{1}{2^{M+1} })\\times 2^{ {2^E}-1}=A\\times 10^Bvm​ax=(1−2M+11​)×22E−1=A×10B。 然后我们遍历所有可能的MMM，根据上面推导出来的公式求EEE的值，然后再利用EEE和MMM求出lgvlgvlgv和输入的值进行比较，如果相等，说明MMM和EEE就是所求的值。做两个浮点数相等判断的时候，我们需要设置一个误差常量epsepseps,具体大小要根据具体的题目来定。 完整的程序(c++11)如下： 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;using namespace std;const double EPS=1e-6;int main(void)&#123; char line[256]; double lg2=log10(2),a,v; int b; while(scanf(\"%s\",line)==1&amp;&amp;strcmp(line,\"0e0\")!=0) &#123; *strchr(line,'e')=' '; sscanf(line,\"%lf%d\",&amp;a,&amp;b); v=log10(a)+b; for(int m=1;m&lt;=10;++m) &#123; int mhe=round(log10((v+m*lg2-log10(pow(2,m)-1))/lg2+1)/lg2); if(fabs(((1&lt;&lt;mhe)-1)*lg2+log10(pow(2,m)-1)-m*lg2-v)&lt;=EPS) &#123; printf(\"%d %d\\n\",m-1,mhe); break; &#125; &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"http://milarodvia.github.io/categories/题解/"},{"name":"OI","slug":"题解/OI","permalink":"http://milarodvia.github.io/categories/题解/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://milarodvia.github.io/tags/OI/"}]},{"title":"二叉树初赛知识讲义","slug":"二叉树初赛知识讲义","date":"2018-11-17T16:49:37.000Z","updated":"2019-05-19T04:15:18.567Z","comments":true,"path":"2018/11/18/二叉树初赛知识讲义/","link":"","permalink":"http://milarodvia.github.io/2018/11/18/二叉树初赛知识讲义/","excerpt":"","text":"树和二叉树的定义 在了解二叉树的定义之前，我们必须先掌握树的定义。 树的定义 树（tree）是n(n≥0)n(n\\geq 0)n(n≥0)个结点的有限集。在任意的一棵非空树中： 有且只有一个被称为根（root）的结点 当n&gt;1n&gt;1n&gt;1时，除了根结点之外的结点可以分为m(m&gt;0)m(m&gt;0)m(m&gt;0)个互不相交的有限集T1,T2,…,TmT_1,T_2,\\dots,T_mT1​,T2​,…,Tm​，其中每一个集合又是一棵树，我们称它们为根结点的子树。 例如，上图中的(a)就不是一棵树，因为它没有根结点。而(b)则是一棵只有一个根结点的树。©就是一棵比较复杂的树了——它具有131313个结点，其中AAA是树根，其余的结点被分为三个互不相交的子集:T1={B,E,F,K,L},T2={C,G},T3={D,H,I,J,M}T_1=\\{B,E,F,K,L\\},T_2=\\{C,G\\},T_3=\\{D,H,I,J,M\\}T1​={B,E,F,K,L},T2​={C,G},T3​={D,H,I,J,M}。T1,T2T_1,T_2T1​,T2​和T3T_3T3​都是根AAA的子树，且本身也是一棵树。 在根的子树中，依然存在子树。这里不再详细说明根的子树的子树的情况……大家需要知道的是，一直被分下去的子树最终只会是一个结点——到那个时候，也就不再存在子树的子树了。我们把没有子树的结点叫做叶子结点。 二叉树的定义 二叉树（binary tree)是另外一种树型结构。二叉树也是树，只不过比较特殊——二叉树的每个结点至多只有两棵子树。（即二叉树中不存在度大于二的结点），并且，二叉树的子树有左右之分，其次序是不可以随意颠倒的。 二叉树有下面的五种基本形态： 空树（即没有根结点的不相交有限集合，可以理解为什么都没有） 只有一个根结点的二叉树 有右子树的二叉树 有左子树的二叉树 左右子树都有的二叉树 树的相关术语也同样使用于二叉树。 树的表现方法 树的结果定义是一个递归的定义，即在树的定义中又运用到了树的概念，这蕴含了树固有的特性。（注意，这点将为日后写关于树的程序提供递归的理论依据）。其实，除了我们常见的结点表示法，树还有很多其他的表示方法，这里介绍两种。 括号表示法 比如下面的这颗树： 用括号表示法表示出来即为：A(B(E,F),C,D(G,H(J,K),I)) 可以看出，所谓括号表示法只不过是把所有的子树层次给表示出来罢了。 维恩图表示法 依然以上面的树为例，用维恩图表示法表示出来的树大概长这样： 同样也是对子树的层次的描述。 树结构中的术语 树的结点包含一个数据元素和若干个指向其子树的分支。结点拥有的子树数称为结点的度（degree)。 例如，在树©中，AAA的度为333，CCC的度为111，FFF的度为000。度为000的结点称为叶子结点或终端节点（也有直接称其为“叶子”的）。在树©中，K,L,F,G,M,I,JK,L,F,G,M,I,JK,L,F,G,M,I,J都是树的叶子结点。相应地，度不为000的结点被称作是分支结点或非终端节点。除根结点外，分支结点也被称作是内部结点。树的度是树内各节点的度的最大值。树©的度为333。结点的子树叫做该结点的孩子(child)或后代或子孙（有时也叫后继），相应地，该结点称为孩子的父亲(parent)或祖先（有时也叫前驱）。例如，在树©中，DDD为AAA的子树T3T_3T3​的根，则DDD是AAA的孩子，而AAA则是DDD的父亲。同一个父亲的孩子之间互称兄弟(sibling)。例如，在树©中，H,IH,IH,I和JJJ互为兄弟。 结点的层次(level)从根结点定义起，根为第一层，根的孩子为第二层——若某结点在第lll层，则其子树的根就在第l+1l+1l+1层。父亲在同一层的结点互为堂兄弟。例如，在树©中，GGG和E,F,H,I,JE,F,H,I,JE,F,H,I,J互为堂兄弟。树中结点的最大层称为树的深度(depth)或高度。树©的深度为444。 如果将树中结点的各子树看成从左至右是有次序的（即不能互换位置），则称该树为有序树，否则称其为无序树。在有序树中，最左边的子树的根称为树的第一个孩子，最右边的子树的根称为树的最后一个孩子。 森林(forest)是m(m≥0)m(m\\geq0)m(m≥0)棵互不相交的树的集合。对数中每个结点而言，其子树的集合即为森林。由此，也可以用森林和数相互递归的定义来描述树。 就逻辑结构而言，任何一棵树都是一个二元组T=(root,F)T=(root,F)T=(root,F)，其中rootrootroot是数据元素，称作是树的根结点；FFF是m(m≥0)m(m\\geq0)m(m≥0)棵树的森林，F=(T1,T2,…,Tm)F=(T_1,T_2,\\dots,T_m)F=(T1​,T2​,…,Tm​)，其中Ti=(ri,Fi)T_i=(r_i,F_i)Ti​=(ri​,Fi​)称作根rootrootroot的第iii棵子树；当m≠0m\\not=0m​=0时，在树根和其子树森林之间就存在着下列关系： RF={&lt;root,ri&gt;∣i=1,2,…,m,m&gt;0}RF=\\{&lt;root,r_i&gt;|i=1,2,\\dots,m,m&gt;0\\} RF={&lt;root,ri​&gt;∣i=1,2,…,m,m&gt;0} 这个定义将有助于得到森林和树与二叉树之间转换的递归定义。 几种特殊的二叉树 满二叉树 一棵深度为kkk且有2k−12^k-12k−1个结点的二叉树被称为满二叉树(也叫作完美二叉树）。例如下面的这棵树就是一棵满二叉树： 在满二叉树中的结点，要么是叶子结点（结点的度为 0），要么结点同时具有左右子树（结点的度为 2）. 完全二叉树 我们可以对满二叉树的结点进行连续编号，约定从根结点起，自上而下，自左至右。由此可以引出完全二叉树的定义。深度为k​k​k​的，有n​n​n​个结点的二叉树，当且仅当其每一个结点都与深度为k​k​k​的满二叉树一一对应时，称之为完全二叉树。完全二叉树除最后一层外的每层结点都完全填满，在最后一层上如果不是满的，则只缺少右边的若干结点。 什么意思呢？我们以下面的完全二叉树为例： 可以看到，完全二叉树的叶子结点分布在最后一层和倒数第二层。我们将完全二叉树的性质总结如下： 叶子结点只可能在可能在层次最大的两层上出现 对于任意的一个结点，若其右子树下的子孙的最大层次为lll，则其左子树的最大层次必定为lll或l+1l+1l+1 完全二叉树有许多重要的性质，将在下一节中介绍。 二叉树的性质 我们着重来讲一讲二叉树的性质。因为这方面是NOIP初赛的重点。 二叉树具有下列重要特性： 性质一 在二叉树的第iii层上至多有2i−12^{i-1}2i−1个结点(i≥0)(i\\geq0)(i≥0) 我们可以利用数学归纳法来证明此命题。 当i=1i=1i=1时，只有一个根结点。显然，2i−1=20=12^{i-1}=2^0=12i−1=20=1是正确的。 现在假设有一数j(1≤j&lt;i)j(1\\leq j&lt;i)j(1≤j&lt;i)，易得第jjj层上至多有2i−12^{i-1}2i−1个结点。那么，可以证明j=ij=ij=i时命题也成立。 由数学归纳法假设：第i−1i-1i−1层上至多有2i−12^{i-1}2i−1个结点。由于二叉树的每个节点的度至多为二，故在第iii层上的最大结点数为第i−1i-1i−1层的最大结点数的两倍。即2×2i−2=2i−12\\times2^{i-2}=2^{i-1}2×2i−2=2i−1。 性质二：深度为k(k≥1)k(k\\geq1)k(k≥1)的二叉树至多有2k−12^k-12k−1个结点。 由性质一可得，深度为kkk的二叉树的最大结点数为: f(k)=∑i=1k2i−1=2k−1f(k)=\\sum_{i=1}^k2^{i-1}=2^k-1 f(k)=i=1∑k​2i−1=2k−1 性质三：对于任何一棵二叉树TTT，如果其叶子结点的个数为n0n_0n0​，度为二的结点数为n2n_2n2​，那么n0=n2+1n_0=n_2+1n0​=n2​+1 我们设n1n_1n1​为二叉树TTT中度为一的结点数。因为二叉树中所有结点的度均小于或等于二，因此二叉树TTT的结点总数为: n=n0+n1+n2n=n_0+n_1+n_2 n=n0​+n1​+n2​ 我们再来考虑二叉树中的分支数。除了根节点之外，其余的结点都有一个分支进入，设BBB为分支总数，则n=B+1n=B+1n=B+1。由于这些分支是度为一或二的结点射出的，所以又有B=n1+2n2B=n_1+2n_2B=n1​+2n2​。于是得： n=n1+2n2+1n=n_1+2n_2+1 n=n1​+2n2​+1 结合上述方程组，得： n0=n2+1n_0=n_2+1 n0​=n2​+1 性质四：具有n​n​n​个结点的完全二叉树的深度为⌊log⁡2n⌋+1​\\lfloor \\log_2n\\rfloor+1​⌊log2​n⌋+1​ 请确保理解了上一节中对完全二叉树的相关定义。 假设完全二叉树TTT的深度为kkk，根据性质二和完全二叉树的定义有： 2k−1−1&lt;n≤2k−1​2^{k-1}-1&lt;n\\leq2^k-1​2k−1−1&lt;n≤2k−1​或2k−1≤n&lt;2k​2^{k-1}\\leq n&lt;2^k​2k−1≤n&lt;2k​ 于是k−1≤log⁡2n&lt;kk-1\\leq \\log_2n&lt;kk−1≤log2​n&lt;k 因为k&gt;0k&gt;0k&gt;0 所以k=⌊log⁡2n⌋+1k=\\lfloor \\log_2n\\rfloor+1k=⌊log2​n⌋+1。 性质五：如果对一棵有n​n​n​个结点的完全二叉树T​T​T​的结点按层序遍历编号，则对任一结点i(1≤i≤n)​i(1\\leq i\\leq n)​i(1≤i≤n)​，有： 如果i=1​i=1​i=1​，则结点i​i​i​就是T​T​T​的根，没有父亲；如果i&gt;1​i&gt;1​i&gt;1​，则其父亲的编号为⌊i2⌋​\\lfloor \\frac{i}{2}\\rfloor​⌊2i​⌋​。 如果2i&gt;n2i&gt;n2i&gt;n，则结点iii没有左子树，即结点iii是叶子结点。否则其左孩子的编号为2i2i2i 如果2i+1&gt;n2i+1&gt;n2i+1&gt;n，则结点iii没有右子树；否则其右孩子的编号是2i+12i+12i+1 对于上面的命题，这里不给出证明。但这不意味着它不重要。感兴趣的同学可以自行上网搜索。 二叉树的遍历 在二叉树的一些应用当中，我们经常需要对结点进行访问。这就提出了一个遍历二叉树(traversing binary tree)的问题，即如何按某条搜索路径寻访树中的每一个结点，使得每个结点都被访问一次，而且只被访问一次。“访问”是一个很广的含义，可以是对结点进行某种处理，也可以是打印结点的值，甚至是释放结点所占的内存空间。遍历对于线性结构来说是非常容易的，用O(n)O(n)O(n)的暴力做法就可以解决。但遍历二叉树则是一个相对困难的过程——我们需要整理出一种规律，以便使二叉树上的结点可以排列在一个线性结构上，从而便于遍历。 回顾二叉树的递归定义，我们知道二叉树是由三个基本单位组成：根结点，左子树和右子树。因此，我们若是可以一次遍历这三部分，那么我们就可以遍历整棵二叉树了。伟大的计算机科学家们为我们创造了如下的遍历算法：先序遍历，中序遍历和后序遍历。 先序遍历 先序遍历的定义为： 若二叉树为空，则为空操作，否则： 访问根结点 先序遍历左子树 先序遍历右子树 中序遍历 中序遍历的定义为： 若二叉树为空，则为空操作，否则： 中序遍历左子树 访问根结点 中序遍历右子树 后序遍历 后序遍历的定义为： 若二叉树为空，则为空操作，否则： 后序遍历左子树 后序遍历右子树 访问根结点 请务必掌握上述的遍历算法 二叉树的一些应用 这里简单列举一例，不再赘述： 二叉树存储表达式（支持前缀、中缀、后缀表达式） 有兴趣的同学可以自行上网搜索相关资料。","categories":[{"name":"讲义","slug":"讲义","permalink":"http://milarodvia.github.io/categories/讲义/"},{"name":"OI","slug":"讲义/OI","permalink":"http://milarodvia.github.io/categories/讲义/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://milarodvia.github.io/tags/OI/"}]},{"title":"OI导论","slug":"OI导论","date":"2018-11-11T12:24:36.000Z","updated":"2019-04-17T09:28:29.956Z","comments":true,"path":"2018/11/11/OI导论/","link":"","permalink":"http://milarodvia.github.io/2018/11/11/OI导论/","excerpt":"","text":"第0章 前言 第一节 什么是OI OI(Olympiad in Informatics,信息学奥林匹克竞赛)是一门新鲜的竞赛学科。它和和物理、数学等竞赛性质相同。OI也是高考中唯一没有的竞赛学科(虽然我认为以后会加入)。那么问题来了，我们为什么要学习OI呢？ 学习OI，在很大程度上不是为了开发产品，但事实上，开发产品的时候往往离不开OI中所涉及的算法。所以，如果想将来做软件业务的同学也需要学习OI。那么，到底什么是算法竞赛，什么是算法呢？ 算法(Algorithm)，是算法竞赛的核心。程序中充斥着算法，生活中充斥着算法，数学里也充斥着算法。我们用下面的例题来讲解一下算法的妙处。 给定一个正整数nnn，求12+22+32+……+n21^2+2^2+3^2+……+n^212+22+32+……+n2的值。 这道题，也许许多同学都会想到一个解法：暴力求解法。也就是，我把nnn的值带入到函数y=f(n)=∑k=1nk2y=f(n)=\\sum_{k=1}^{n}k^2y=f(n)=∑k=1n​k2之中，就可以得到结果。当然了，暴力求解法是最简单的算法，无论是人工手算还是电脑计算都很方便。但是，当n=105n=10^5n=105时，手算是一时半会儿算不出结果的。于是，我们就需要更高级的算法。 通过对数学公式的推导。我们可以得到y=f(n)=∑k=1nk2=n(n+1)(2n+1)6y=f(n)=\\sum_{k=1}^{n}k^2=\\frac{n(n+1)(2n+1)}{6}y=f(n)=∑k=1n​k2=6n(n+1)(2n+1)​。这样，哪怕nnn的值很大很大，我们都可以通过几步的乘除法运算即可求出答案。感兴趣的同学可以看一下平方和公式的推导过程： 前提条件:a2+b2=a(a+b)−b(a−b)a^2+b^2=a(a+b)-b(a-b)a2+b2=a(a+b)−b(a−b) 设S=12+22+32+⋯+n2S=1^2+2^2+3^2+\\dots+n^2S=12+22+32+⋯+n2 S=1(2−1)+2(3−1)+⋯+n(n+1−1)S=1(2-1)+2(3-1)+\\dots+n(n+1-1)S=1(2−1)+2(3−1)+⋯+n(n+1−1) S=1⋅2+2⋅3+⋯+n(n−1)−n(n+1)2S=1·2+2·3+\\dots+n(n-1)-\\frac{n(n+1)}{2}S=1⋅2+2⋅3+⋯+n(n−1)−2n(n+1)​ ∵n(n+1)2=13[n(n+1)(n+2)−(n−1)n(n+1)]∵\\frac{n(n+1)}{2}=\\frac{1}{3}[n(n+1)(n+2)-(n-1)n(n+1)]∵2n(n+1)​=31​[n(n+1)(n+2)−(n−1)n(n+1)] ∴S=13(1×2×3−0×1×2)+13(2×3×4−1×2×3)+⋯+13[n×(n+1)×(n+2)∴S=\\frac{1}{3}(1\\times2\\times3-0\\times1\\times2)+\\frac{1}{3}(2\\times3\\times4-1\\times2\\times3)+\\dots+\\frac{1}{3}[n\\times(n+1)\\times(n+2)∴S=31​(1×2×3−0×1×2)+31​(2×3×4−1×2×3)+⋯+31​[n×(n+1)×(n+2) −(n−1)×n×(n+1)]-(n-1)\\times n\\times(n+1)]−(n−1)×n×(n+1)] ∴S=n(n+1)(2n+1)6∴S=\\frac{n(n+1)(2n+1)}{6}∴S=6n(n+1)(2n+1)​ 看到了吧？这就是算法的伟大。这也给了我们一些启示： 优秀的算法可以帮助我们减少工作量 OI与数学是密不可分的亲兄弟 公式不是无缘无故产生的，而是推导出来的！ 具体衡量算法的优秀程度的知识会在后面详细讲解。大家现在需要知道的是，算法是有优劣之分的！ 上面的那个例子，仅仅是对式子的恒等变形来优化常数。然而，在一般的算法设计中，我们还需要其他的算法设计策略。 学习OI的好处 当然，学习并积极地参加到OI中是有很大的好处的。我简单地列举几点： 锻炼思维，开拓视野。 有利于升学。 更高效率地使用电脑。 可以提升你的数学能力和英语能力。 现代的互联网公司在面试的时候更加爱考察程序员的算法素养。因此今天学习OI，对将来想在计算机行业就业的同学也是非常有帮助的。 第二节 和OI相关的赛事 OI虽然是是一门新起的奥林匹克事业，但是关于OI的国内外赛事是很多的。如果希望通过参加这些比赛来获得荣誉，了解这些比赛是非常有必要的。 NOIP NOIP(National Olympiad in Informatics in Provinces，全国青少年信息学奥林匹克联赛)，旧称分区联赛，是一项由CCF(China Computer Federation，中国计算机学会)承办的全国统一的OI赛事。NOIP分初赛和复赛——初赛是地级市一级的，为笔试，复赛是省与直辖市一级的，为上机。初赛一般在每年十月中旬举行，而复赛一般在每年十一月举行。NOIP支持的语言有C语言，C++语言和Pascal语言(在2020年，NOIP将不再支持Pascal语言)。为了顺应时代发展的潮流，本套讲义将由C语言和C++语言作为程序描述语言。 NOIP分普及组和提高组。普及组的难度较低，面向广大的小学生和初中生；提高组的难度较高，面向广大的高中生。NOIP在初赛和复赛都设置了等级奖励制度，即一二三等奖颁奖制度。一般来说，进入复赛的资格就是初赛一等奖。不同的省的分数线一般都不一样，浙江江苏的分数线尤其高，因此浙江和江苏的OIer需要付出更大的努力才可以获得NOIP的成功。 NOI **NOI(National Olympiad in Informatics，全国青少年信息学奥林匹克竞赛)**是NOIP的兄弟比赛，是一项由CCF(China Computer Federation，中国计算机学会)承办的全国统一的OI赛事。NOI是国内包括港澳在内的省级代表队最高水平的大赛，自1984年至2018年，在国内包括香港、澳门，已组织了33次竞赛活动。每年经各省选拔产生5名选手(其中至少有一名是女选手)，由中国计算机学会在计算机普及较好的城市组织进行比赛。这一竞赛记个人成绩，同时记团体总分。 NOI期间，举办同步夏令营和NOI网上同步赛，给那些程序设计爱好者和高手提供机会。为增加竞赛的竞争性、对抗性和趣味性以及可视化，NOI组织进行团体对抗赛，团体对抗赛实质上是程序对抗赛，其成绩纳入总分计算。 NOI将从正式选手中选出成绩前50名，作为中国国家集训队，集训队队员将获得清华北大的保送资格。 其他的OI赛事 其他比较著名的OI赛事还有APIO，CTSC，IOI等。感兴趣的同学可以自行上网搜索。 第三节 什么是OJ 我们来稍微的了解一下什么是OJ(Online Judge)。OJ是很好的在线OI学习平台，它的中文名字叫做在线测评系统。OJ上面有许多信息竞赛的习题，我们通过做这些习题来提升自我——最后到达一种神犇的境界。我们主要使用下面的几个OJ： 洛谷|计算机科学教育新生态 温州中学OJ 古老的无名OJ 我主要是想讲一些OJ上面的测评信息的含义： 类型 全写 含义 AC Accept 程序通过，得到分数 CE Compile Error 编译错误，失去全部分数 PC Partially Correct 部分正确，没有分数 WA Wrong Answer 答案错误，没有分数 RE Runtime Error 运行时错误，没有分数 TLE Time Limit Exceeded 超出时间限制，没有分数 MLE Memory Limit Exceeded 超出内存限制，没有分数 OLE Output Limit Exceeded 输出超过限制，没有分数 UKE Unknown Error 出现未知错误，没有分数 关于OJ的信息还有很多，这里不再赘述。 第四节 讲义信息与声明 本讲义由浙江巨硬科技有限公司旗下的巨硬教育撰写。由巨硬教育教研组全体成员参与编写。 copyright：本讲义的全部内容在 CC BY-SA 4.0-署名-相同方式共享 4.0协议之条款下提供，附加条款亦可能应用。 第一章 基础语义 第一节 C语言的输出语句 所谓输入输出，就是在控制台中输入输出。什么是控制台呢？看： 这就是一个控制台。也就是我们常说的命令提示符。一般的程序的输入输出都在这里完成。 我们从最简单的一个程序开始:Hello,World! 这道题目的唯一要求就是输出一行Hello,World!。为了让程序实现输出文本这个功能，我们需要用到下面的C语言输出语句： 1printf(\"Hello,World!\"); 但是，只有那么一条语句，程序是不可能通过编译的。完整的正确的程序如下： 123456#include&lt;stdio.h&gt;int main(void)&#123; printf(\"Hello,world!\"); return 0;&#125; 上面的程序有很多大家暂时不理解的地方：我们暂时把这些当做是固定搭配来记忆，以后会详细解释。所以，我们总结出的C语言程序框架是： 123456#include&lt;stdio.h&gt;int main(void)&#123; return 0;&#125; 我们把程序所要执行的语句写在return 0;和{之间——正像上面的程序一样。 暂时记不住程序结构也没关系，练习的次数多了，以后自然会记住的，不要着急。 现在你学会了C语言的输出语句了吗？如果答案是肯定的，那么恭喜你，你已经成为了一名程序员，并且已经教会电脑说话了！ 课后习题 输出5次“Hello，World！”。 第二节 C语言的变量类型以及标识符命名规则 变量与常量 什么是变量呢？变量就是指值的大小会改变的量。比如大家在玩游戏时人物的血量值——血量值是一直在更新的，不是恒定不变的，那么血量值就是变量。 我们也可以从数学函数的角度理解变量。如函数y=f(x)=ax+by=f(x)=ax+by=f(x)=ax+b。其中的xxx和yyy就是变量。当然咯，有变量就会有常量。顾名思义，常量就是那些值一直不变的量。比如上述函数中的aaa和bbb。他们是不会变化的。 变量和常量的概念同样适合于C语言——或者说，它适用于所有的编程语言。 由于变量和常量里面存的是数值，所以我们就需要知道有哪些类型的数值： 整数 小数(浮点数) 在C语言中，同样有对应数值类型存储的变量(常量)的类型。如下表所示： 关键字 范围 int [−2147483648,2147483648][ -2147483648,2147483648][−2147483648,2147483648] unsigned int [0,4294967295][ 0,4294967295][0,4294967295] unsigned short [0,65535][ 0,65535][0,65535] long [−2147483648,2147483648][ -2147483648,2147483648][−2147483648,2147483648] unsigned long [0,4294967295][ 0,4294967295][0,4294967295] char [−128,127][ -128,127][−128,127] unsigned char [0,255][0,255][0,255] float [3.4x×10−38,3.4×1038][ 3.4 x\\times10^{-38}, 3.4 \\times 10^{38}][3.4x×10−38,3.4×1038] double [1.7×10−308,1.7×10308][1.7\\times 10^{-308},1.7\\times 10^{308}][1.7×10−308,1.7×10308] 注：本表中所提供的精度范围只适用于323232位的计算机。 这张表格很重要。我希望你们都可以把他给记住。我们来详细地读一下这张表。里面出现了一个新词：关键字。什么是关键字呢？关键字(也叫关键词)是一个语言的重要组成部分——他们非常特殊，因为他们对于语言语法的描述有至关重要的作用！ 我们来看一些变量的定义语法: 1int n; 我们首先写出了一个关键字int。之后是一个空格，空格后边是一个标识符——变量的名字。那么标识符的命名有什么样的规则呢？ 标识符命名规则 标识符，通俗地讲，就是名字。我在这里讲一下标识符的命名规则：标识符可以包含英语的26个字母的大小写，也可以包含十个阿拉伯数字(但是不能是标识符的开头)，也可以包括下划线(_)，标识符不能是关键字，也不能拥有除上述字符之外的任何字符！！！。 比如说，下面的这些标识符就是不合法的： int 9years @59hahaha 第一个标识符错在哪里呢？标识符不能是关键字，而int是一个关键字。 第二个标识符错在哪里呢？标识符不可以以数字开头，而9是一个数字。 第三个标识符错在哪里呢？标识符不可以包含其他字符，而@是其他字符。 我再举几个合法的标识符的例子： C_Programming_Language year2018 Macrohard _ 第四个标识符是不是很出乎你的意料？ 但是，我们通常有一套标识符的命名习惯：**标识符最好以小写字母开头，而不是其他。中间最好不要有阿拉伯数字(末尾可以)，单词和单词中间最好以下划线分割——否则从第二个单词起，单词的首字母大写。**我举几个正确的例子： hello_macrohard helloMacrohard macrohard365 合理的遵守标识符的命名规则有助于让你的代码更加优美。 课后习题 口述C语言的标识符定义规则 第三节 C语言的输入语句 整型输入 我们对于一个人是否是文盲的评判标准是什么？他是否正确地能读和写。现在，我们已经让计算机学会了写，是时候让它学会读了。 我们从一个最简单的程序开始：a+b问题 12345678#include&lt;stdio.h&gt;int main(void)&#123; int a,b; scanf(\"%d%d\",&amp;a,&amp;b); printf(\"%d\",a+b); return 0;&#125; 上面的程序出现了一个之前从来都没有涉及到的语句：scanf语句： 1scanf(\"%d%d\",&amp;a,&amp;b); 上述代码的意义就是：从控制台读入两个整数，分别存放在变量aaa和bbb中。也就是说，假如我在控制台里边输入: 11 2 那么变量aaa和bbb的值将会是111和222。懂了吗？读入整数的规则就是这样的。我把它总结一下，总结在这里： 1scanf(\"%d...\",&amp;?,&amp;?,...&amp;?); 假设我们要输入nnn个整数，变量的名字分别是a1,a2,…,ana1,a2,\\dots,ana1,a2,…,an。那么我们就可以这样输入： 1scanf(\"%d%d……%d\",&amp;a1,&amp;a2,……,&amp;an); 注意：输入整数的提示符是%d。逗号后面变量名字前面的&amp;符号是必须的。我举几个错误的例子： 1scanf(\"%D\",&amp;a); 1scanf(\"%d\",a); 第一个输入语句错在提示符错误。输入整数的提示符应该是%d，而不是%D。C语言是区分大小写的。 第二个输入语句错在变量前面没有加&amp;符号。目前，我们所写的一切scanf语句都是需要&amp;的。&amp;是取地址操作。 上面的程序中的printf语句也有了新的用法： 1printf(\"Hello,world!\"); 1printf(\"%d\",a+b); 看出区别了吗？第一个printf语句只拥有一个参数，而第二个拥有两个！不过，我们已经学习了scanf的用法，第二条printf语句的用法也是可以望文生义的。它的作用是：输出表达式a+ba+ba+b的值。 所以，对于执行两个整数的加法运算，这个程序像是天衣无缝了。但是，现实生活中，相加的两个数往往是实数，如何实现对实数的输入输出呢？ 浮点输入 在上一节中，我们了解到：C语言中的变量(常量)的数值类型包含整型和浮点型。我在这里补充一点：浮点型变量也是可以存储整数的。如果想要让我们的程序支持浮点加法运算，我们首先需要把变量aaa和bbb改成浮点型的： 1float a,b; 没错，那么接下来我们尝试着修改scanf语句。在上文我讲过：%d是输入输出整数的提示符，那么自然也有给小数准备的提示符，他是%f。 那么我们就可以把scanf语句修改成这样： 1scanf(\"%f%f\",&amp;a,&amp;b); 下面的printf语句也是一样的改法，完整的程序如下： 12345678#include&lt;stdio.h&gt;int main(void)&#123; float a,b; scanf(\"%f%f\",&amp;a,&amp;b); printf(\"%f\",a+b); return 0;&#125; 程序运行效果如下所示： 输出回车 结果没有任何问题。但是这个“请按任意键继续”出现在这里是不是有点难受？我们只需要在printf语句中做一个小小的变动即可： 1printf(\"%f\\n\",a+b); 看到了吗？只需要加一个\\n即可。在输出语句中，\\n意味着输出一个回车。效果如下： 注意事项：在许多OJ中测评，有没有行尾回车都是无所谓的(也就是过滤多余的回车和空格)。但是也有一些严格的OJ，每一个空格和回车都会算的清清楚楚。所以，在做题的时候，输出一个行尾回车总是保险的。 现在你学会了输入语句了吗？恭喜你，现在你已经可以使用C语言进行简单的编程了！稍微总结一下提示符的用法：整数用%d，浮点数用%f。 课后习题 请你完成这样的一个程序：此程序从控制台读入两个实数，输出它们的乘积。 请你完成这样的一个程序：此程序从控制台读入一个整数和一个实数，输出它们的和。 第四节 C语言中的特殊符号的意义 空格在C语言中的意义 空格是什么？在我们的日常交流当中，空格没有任何的意义。比如这句话：“我 喜欢 C 语言 编 程 。”虽然字与字之间有一些空格，但我们还是可以读懂的。C语言也大致如此：只要不在标识符内部出现空格，其他部分出现空格一般是无害的。比如下面的这个程序： 123456#include &lt;stdio.h&gt;int main ( void )&#123; printf ( \"Hello,world\\n\" ); return 0 ;&#125; 这个程序是完全正确的。可见，C语言编译器也和我们人一样，对空格不怎么敏感。 需要注意的是，TAB和回车的性质和空格相似，在此不再赘述。 注释 单行注释 什么是注释？我们来看一下注释的定义： 注释，是对书籍或文章的语汇、内容、背景、引文作介绍、评议的文字。为古书注释开始于先秦时期。中国古代分得较细，分别称之为注、释、传、笺、疏、章句等。包含的内容很广。诸凡字词音义、时间地点、人物事迹、典故出处、时代背景都是注释对象。有脚注、篇末注、夹注等形式。古籍注释列在正文之中，有双行夹注和夹注。现代书籍注释列于正文当页之下，称脚注，亦称本面注；列于文章之后或列于书籍之后者称篇末注。不管采用何种方式，全书注文的编排一般要求统一，以便于读者查考。注释在教科书中应用广泛，是学生学习的重要条件。 现代学术作品中的注释一般分内容解释和来源解释两种。前者多指对文章或书籍中某一部分词句作进一步说明，但为了防止冗杂而把它放在段落之外（文末或页边）。后者一般是为了保障原作者的著作权，注明某此语句、词语、观点的来源，以便读者的查证，另一方面也是为了尊重他人的知识产权和劳动。 那么注释在程序里面有什么用呢？很显然，注释的加入可以让人们充分的理解程序的意义。比如： 123456#include &lt;stdio.h&gt;int main(void)&#123; printf(\"Hello,World!\\n\");//输出Hello,World! return 0;&#125; 上面的程序使用了C语言的单行注释的语法。拥有详细注释的程序对于初学者（甚至是根本不懂C语言的人）来说是非常友好的。因为他们可以通过注释中的内容来猜测出程序的作用。 单行注释由//打头//后边就是注释的内容。需要注意的是，单行注释是不可以跨行的。比如下面的程序就不是合法的： 1234567#include &lt;stdio.h&gt;int main(void)&#123; printf(\"Hello,World!\\n\");//输出 Hello,World! return 0;&#125; 请记住这个规则，因为在很多编程语言当中，//都是单行注释的标志。 编译器对于任何的注释内容都是不会理会 。 跨行注释 跨行注释在C语言中的写法： 123/*这里写注释内容*/ 我需要说明很重要的一点：**跨行注释是不可以嵌套的！**比如下面的程序就不是合法的： 12345678910#include &lt;stdio.h&gt;int main(void)&#123; printf(\"Hello,World!\\n\"); /* 输出 /*Hello,World!*/ */ return 0;&#125; 基本运算符 我们知道，计算机的本职工作是做计算。那么在计算机中有哪一些常用的基本运算符呢？ 加减乘除 在日常生活中，加减乘除运算应该是使用最频繁的运算了。C语言也提供了丰富的加减乘除运算的服务。符号表如下： 运算名称 表达符号 加法 + 减法 - 乘法 * 除法 / 需要说明的是：**运算在C语言中同样存在优先级的问题。且乘除法运算的优先级比加减法大。**对于运算，我们有下面的运算规则： 先算优先级大的运算，再算优先级小的运算。总体顺序都是从左到右的。 注意：**在C语言中处理加减乘除运算时，符号两边要是都是整数，那结果就是整数如果有一个浮点数，则结果将是浮点数。**所以，这个表达式在C语言中的结果是3。但是如果是表达式或，结果就为想一想，为什么？ 括号 当然，在C语言中，你也可以给运算加上括号，以此提升运算的优先级。需要说明的是：**C语言中只有小括号一种表示优先运算的括号！但是小括号也是可以嵌套的。**比如：(1+(1+9))×10−8(1+(1+9))\\times10-8(1+(1+9))×10−8，在C语言中，这个算式是正确的。它对应着数学中的这个算式:[1+(1+9)]×10−8[1+(1+9)]\\times10-8[1+(1+9)]×10−8。 取模运算 取模运算应该是大家从来都没有见过的。其实这个运算小学老师应该需要和大家讲——遗憾的是，取模运算一般在高等数学中才会学到。 我们先来观察一个算式：10÷3=3…110\\div3=3\\dots110÷3=3…1 还记得各个部分分别叫什么名字吗？101010是被除数，第一个333是除数，第二个333是商，111是余数。我们的取模运算求的就是这个余数。比方说我们想要知道201820182018除以365365365的余数，在数学中，我们这样表示：2018 mod 3652018\\,mod\\,3652018mod365。在C语言中，我们这样表示：2018%365。%在C语言中就表达了取模运算的意思。 注意：取模运算的两个运算数一定要是int型的整型变量。 取模运算的优先级和乘除法同级。 课后习题 请为自己编写的一个程序加上注释，要求使用单行注释和跨行注释。 请把下面的表达式转化成C语言的表达形式： [1.5×a+(bc)]×(a mod b)[1.5\\times a+(\\frac bc)]\\times(a\\,mod\\,b)[1.5×a+(cb​)]×(amodb) 2018÷365+532018\\div365+\\frac532018÷365+35​ 第五节 输入输出语句扩展与字符变量 我们现在已经掌握了printf和scanf的基本使用方法：包括输入输出整型或浮点型的变量值。事实上，C语言还提供了其他的输入输出函数。 puts puts函数的发明可谓是一个伟大的功绩。puts函数主要用于输出一个字符串——而不是输出变量的值。而且，puts函数输出字符串的时候自动输出一个回车。这些都不是重点，重点是：puts函数比printf快。 比如这个程序段： 1printf(\"Hello,Macrohard!\\n\"); 就可以等价于： 1puts(\"Hello,Macrohard!\"); 如果大家在以后需要输出一个带回车的字符串，请使用puts来完成任务，毕竟这是一个优化的方法。 putchar putchar是一个非常非常快速的输出函数。需要注意的是，putchar只能输出一个字符。使用方法如下: 1putchar('?');//?是你需要输出的字符 注意：C语言里面字符串需要用一对双引号配合表达，而单个字符则使用单引号。 字符型变量 这里需要解释一下什么是字符型变量。字符型变量就是存储一个字符(注意，本讲义中的字符均指西文字符，而不是中文或其他字符)。 实际上，我们在计算机中是无法直接表示出一个字符的。所以我们需要借助ASCLL码表来存储一个字符。现代计算机科学存储字符的思路很明确：将字符标号，然后使用这个编号来表示字符即可。事实上，这世界上所有的主流的码表都是这样设计的。我们来看一下ASCLL码表的编码规则： DEC（十进制） HEX（十六进制） CHAR（字符） 转义字符 0 00 NUL \\0 1 01 SOH 2 02 STX 3 03 ETX 4 04 EOT 5 05 ENQ 6 06 ACK 7 07 BEL \\a 8 08 BS \\b 9 09 HT \\t 10 0A LF \\n 11 0B VT \\v 12 0C FF \\f 13 0D CR \\r 14 0E SO 15 0F SI 16 10 DLE 17 11 DC1 18 12 DC2 19 13 DC3 20 14 DC4 21 15 NAK 22 16 SYN 23 17 ETB 24 18 CAN 25 19 EM 26 1A SUB 27 1B ESC 28 1C FS 29 1D GS 30 1E RS 31 1F US 32 20 space空格 33 21 ! 34 22 &quot; 35 23 # 36 24 $ 37 25 % 38 26 &amp; 39 27 ’ 40 28 ( 41 29 ) 42 2A * 43 2B + 44 2C , 45 2D - 46 2E . 47 2F / 48~57 30~39 0~9 58 3A : 59 3B ; 60 3C &lt; 61 3D = 62 3E &gt; 63 3F ? 64 40 @ 65~90 41~5A A~Z 91 5B [ 92 5C \\ `` 93 5D ] 94 5E ^ 95 5F _ 96 60 ` 97~122 61~7A a~z 123 7B { 124 7C | 125 7D } 126 7E ~ 127 7F DEL 注：第128～255号为扩展字符（不常用）。 上表中出现了一个新的名词：转义字符。什么是转义字符呢？转义字符可以轻松地表达那些不便表达的字符——比如我们之前学的\\n。转义字符都由\\打头。 我需要说明的是：在C语言内部，字符类型其实是以整数的形式存储的。也就是说，char其实也是一种整型类型。 getchar 讲完了字符变量，也就可以讲getchar了。getchar函数的工作就是从控制台读取一个字符。比如下面的代码段: 1printf(\"ASCALL码是:%d\\n\",getchar()); 这个程序简单地讲述了一下getchar的用法。请牢记getchar的用法，这个函数在未来的程序编写中将由非常巨大的作用。 课后习题 请你完成这样的一个程序：此程序从控制台读入一个字符，输出它的ASCLL码。 请你完成这样的一个程序：此程序从控制台读入一个字符，请输出这个字符。 第六节 章节小结 到目前为止，我们已经讲完了C语言最基础的一部分语法。通过对这些输入输出函数的合理利用，相信大家已经可以完成一些非常简单的程序了。","categories":[{"name":"讲义","slug":"讲义","permalink":"http://milarodvia.github.io/categories/讲义/"},{"name":"OI","slug":"讲义/OI","permalink":"http://milarodvia.github.io/categories/讲义/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://milarodvia.github.io/tags/OI/"}]}]}